
BMP180_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004264  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004378  08004378  00014378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d8  080043d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043d8  080043d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043d8  080043d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08004450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004450  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000062b4  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013da  00000000  00000000  00026390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000526  00000000  00000000  00027e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016859  00000000  00000000  00028356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000901a  00000000  00000000  0003ebaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008168e  00000000  00000000  00047bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002110  00000000  00000000  000c9258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cb368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800435c 	.word	0x0800435c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800435c 	.word	0x0800435c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <BMP180_Read_Id>:
#include "main.h"
#include "stdlib.h"
#include "BMP180.h"

extern I2C_HandleTypeDef hi2c1;
void BMP180_Read_Id(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af04      	add	r7, sp, #16
	uint8_t Data[1];
	HAL_I2C_Mem_Read(&hi2c1, BMP_180_Read ,BMP_180_ID , 1, &Data, 1, 1000);
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	2301      	movs	r3, #1
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	22d0      	movs	r2, #208	; 0xd0
 8000d8c:	21ee      	movs	r1, #238	; 0xee
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <BMP180_Read_Id+0x28>)
 8000d90:	f001 f992 	bl	80020b8 <HAL_I2C_Mem_Read>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000008c 	.word	0x2000008c

08000da0 <BMP180_Read_Cali_Data>:

void BMP180_Read_Cali_Data(Bmp180_t *BMP_180){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t Data[22];
	HAL_I2C_Mem_Read(&hi2c1, BMP_180_Read ,BMP_180_Cali_Dat , 1, &Data, 22 , 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2316      	movs	r3, #22
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	22aa      	movs	r2, #170	; 0xaa
 8000dbc:	21ee      	movs	r1, #238	; 0xee
 8000dbe:	4836      	ldr	r0, [pc, #216]	; (8000e98 <BMP180_Read_Cali_Data+0xf8>)
 8000dc0:	f001 f97a 	bl	80020b8 <HAL_I2C_Mem_Read>
	BMP_180->AC1 = ((Data[0]<<8)|Data[1]);
 8000dc4:	7a3b      	ldrb	r3, [r7, #8]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	7a7b      	ldrb	r3, [r7, #9]
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	801a      	strh	r2, [r3, #0]
	BMP_180->AC2 = ((Data[2]<<8)|Data[3]);
 8000dd6:	7abb      	ldrb	r3, [r7, #10]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	805a      	strh	r2, [r3, #2]
	BMP_180->AC3 = ((Data[4]<<8)|Data[5]);
 8000de8:	7b3b      	ldrb	r3, [r7, #12]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	809a      	strh	r2, [r3, #4]
	BMP_180->AC4 = ((Data[6]<<8)|Data[7]);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	80da      	strh	r2, [r3, #6]
	BMP_180->AC5 = ((Data[8]<<8)|Data[9]);
 8000e0e:	7c3b      	ldrb	r3, [r7, #16]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	7c7b      	ldrb	r3, [r7, #17]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	811a      	strh	r2, [r3, #8]
	BMP_180->AC6 = ((Data[10]<<8)|Data[11]);
 8000e22:	7cbb      	ldrb	r3, [r7, #18]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	7cfb      	ldrb	r3, [r7, #19]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	815a      	strh	r2, [r3, #10]
	BMP_180->B1 = ((Data[12]<<8)|Data[13]);
 8000e36:	7d3b      	ldrb	r3, [r7, #20]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	7d7b      	ldrb	r3, [r7, #21]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	819a      	strh	r2, [r3, #12]
	BMP_180->B2 = ((Data[14]<<8)|Data[15]);
 8000e48:	7dbb      	ldrb	r3, [r7, #22]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	81da      	strh	r2, [r3, #14]
	BMP_180->MB = ((Data[16]<<8)|Data[17]);
 8000e5a:	7e3b      	ldrb	r3, [r7, #24]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	7e7b      	ldrb	r3, [r7, #25]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	821a      	strh	r2, [r3, #16]
	BMP_180->MC = ((Data[18]<<8)|Data[19]);
 8000e6c:	7ebb      	ldrb	r3, [r7, #26]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	7efb      	ldrb	r3, [r7, #27]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	825a      	strh	r2, [r3, #18]
	BMP_180->MD = ((Data[20]<<8)|Data[21]);
 8000e7e:	7f3b      	ldrb	r3, [r7, #28]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	7f7b      	ldrb	r3, [r7, #29]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	829a      	strh	r2, [r3, #20]

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <BMP180_Read_Data>:

void BMP180_Read_Data(Bmp180_t *BMP_180){
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b096      	sub	sp, #88	; 0x58
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	6078      	str	r0, [r7, #4]
	uint8_t Data[1];
	int32_t x1,x2,x3,b3,b5,b6,t,Temp,p;
	uint32_t b4,b7;
	Data[0] = 0x2E;
 8000ea8:	232e      	movs	r3, #46	; 0x2e
 8000eaa:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Write(&hi2c1, BMP_180_Write, BMP_180_TEMP_Write, 1, &Data, 1, 100);
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	22f4      	movs	r2, #244	; 0xf4
 8000ebe:	21ef      	movs	r1, #239	; 0xef
 8000ec0:	48b5      	ldr	r0, [pc, #724]	; (8001198 <BMP180_Read_Data+0x2f8>)
 8000ec2:	f000 ffff 	bl	8001ec4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f000 fc2c 	bl	8001724 <HAL_Delay>
	int8_t Data_Temp[2];
	HAL_I2C_Mem_Read(&hi2c1, BMP_180_Read ,BMP_180_TEMP_Read , 1, Data_Temp, 2 , 100);
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	22f6      	movs	r2, #246	; 0xf6
 8000ede:	21ee      	movs	r1, #238	; 0xee
 8000ee0:	48ad      	ldr	r0, [pc, #692]	; (8001198 <BMP180_Read_Data+0x2f8>)
 8000ee2:	f001 f8e9 	bl	80020b8 <HAL_I2C_Mem_Read>
	int32_t T=((Data_Temp[0]<<8)+Data_Temp[1]);
 8000ee6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
	Data[0] = 0x34+(3<<6);
 8000ef4:	23f4      	movs	r3, #244	; 0xf4
 8000ef6:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Write(&hi2c1, BMP_180_Write, BMP_180_TEMP_Write, 1, &Data, 1, 100);
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	22f4      	movs	r2, #244	; 0xf4
 8000f0a:	21ef      	movs	r1, #239	; 0xef
 8000f0c:	48a2      	ldr	r0, [pc, #648]	; (8001198 <BMP180_Read_Data+0x2f8>)
 8000f0e:	f000 ffd9 	bl	8001ec4 <HAL_I2C_Mem_Write>
	HAL_Delay (26);
 8000f12:	201a      	movs	r0, #26
 8000f14:	f000 fc06 	bl	8001724 <HAL_Delay>
	uint8_t Data_Press[3];
	HAL_I2C_Mem_Read(&hi2c1, BMP_180_Read ,BMP_180_TEMP_Read , 1, Data_Press, 3 , 100);
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	22f6      	movs	r2, #246	; 0xf6
 8000f2a:	21ee      	movs	r1, #238	; 0xee
 8000f2c:	489a      	ldr	r0, [pc, #616]	; (8001198 <BMP180_Read_Data+0x2f8>)
 8000f2e:	f001 f8c3 	bl	80020b8 <HAL_I2C_Mem_Read>
	int32_t UP= ((Data_Press[0]<<16)+(Data_Press[1]<<8)+Data_Press[2])>>5;
 8000f32:	7b3b      	ldrb	r3, [r7, #12]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	7b7b      	ldrb	r3, [r7, #13]
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	4413      	add	r3, r2
 8000f3c:	7bba      	ldrb	r2, [r7, #14]
 8000f3e:	4413      	add	r3, r2
 8000f40:	115b      	asrs	r3, r3, #5
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c

	x1=(T-BMP_180->AC6 )*BMP_180->AC5/pow(2,15); // Temp calculate Part
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	8912      	ldrh	r2, [r2, #8]
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa4c 	bl	80003f4 <__aeabi_i2d>
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b8e      	ldr	r3, [pc, #568]	; (800119c <BMP180_Read_Data+0x2fc>)
 8000f62:	f7ff fbdb 	bl	800071c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fd5b 	bl	8000a28 <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
	x2=BMP_180->MC*pow(2,11)/(x1+BMP_180->MD);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa39 	bl	80003f4 <__aeabi_i2d>
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b86      	ldr	r3, [pc, #536]	; (80011a0 <BMP180_Read_Data+0x300>)
 8000f88:	f7ff fa9e 	bl	80004c8 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4614      	mov	r4, r2
 8000f92:	461d      	mov	r5, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa27 	bl	80003f4 <__aeabi_i2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff fbb5 	bl	800071c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fd35 	bl	8000a28 <__aeabi_d2iz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
	b5=x1+x2;
 8000fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	4413      	add	r3, r2
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
	Temp=(b5+8)/pow(2,4);
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	3308      	adds	r3, #8
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa10 	bl	80003f4 <__aeabi_i2d>
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <BMP180_Read_Data+0x304>)
 8000fda:	f7ff fb9f 	bl	800071c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fd1f 	bl	8000a28 <__aeabi_d2iz>
 8000fea:	4603      	mov	r3, r0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	BMP_180->Temperature=Temp/10;
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	4a6d      	ldr	r2, [pc, #436]	; (80011a8 <BMP180_Read_Data+0x308>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	1092      	asrs	r2, r2, #2
 8000ff8:	17db      	asrs	r3, r3, #31
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	839a      	strh	r2, [r3, #28]

	b6=b5-4000;
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
	x1=(BMP_180->B2*(b6*b6/pow(2,12))/pow(2,11));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f9ef 	bl	80003f4 <__aeabi_i2d>
 8001016:	4604      	mov	r4, r0
 8001018:	460d      	mov	r5, r1
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	fb03 f303 	mul.w	r3, r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f9e7 	bl	80003f4 <__aeabi_i2d>
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <BMP180_Read_Data+0x30c>)
 800102c:	f7ff fb76 	bl	800071c <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	f7ff fa46 	bl	80004c8 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b55      	ldr	r3, [pc, #340]	; (80011a0 <BMP180_Read_Data+0x300>)
 800104a:	f7ff fb67 	bl	800071c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fce7 	bl	8000a28 <__aeabi_d2iz>
 800105a:	4603      	mov	r3, r0
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
	x2=BMP_180->AC2*b6/pow(2,11);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001064:	461a      	mov	r2, r3
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9c1 	bl	80003f4 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <BMP180_Read_Data+0x300>)
 8001078:	f7ff fb50 	bl	800071c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fcd0 	bl	8000a28 <__aeabi_d2iz>
 8001088:	4603      	mov	r3, r0
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
	x3=x1+x2;
 800108c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001090:	4413      	add	r3, r2
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
	b3=(((BMP_180->AC1*4+x3)<<3)+2)/4;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	009a      	lsls	r2, r3, #2
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	3302      	adds	r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da00      	bge.n	80010aa <BMP180_Read_Data+0x20a>
 80010a8:	3303      	adds	r3, #3
 80010aa:	109b      	asrs	r3, r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
	x1=BMP_180->AC3*b6/pow(2,13);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f999 	bl	80003f4 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <BMP180_Read_Data+0x310>)
 80010c8:	f7ff fb28 	bl	800071c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fca8 	bl	8000a28 <__aeabi_d2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
	x2=(BMP_180->B1*(b6*b6/pow(2,12)))/pow(2,16);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f986 	bl	80003f4 <__aeabi_i2d>
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ee:	fb03 f303 	mul.w	r3, r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f97e 	bl	80003f4 <__aeabi_i2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <BMP180_Read_Data+0x30c>)
 80010fe:	f7ff fb0d 	bl	800071c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff f9dd 	bl	80004c8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <BMP180_Read_Data+0x314>)
 800111c:	f7ff fafe 	bl	800071c <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fc7e 	bl	8000a28 <__aeabi_d2iz>
 800112c:	4603      	mov	r3, r0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
	x3=((x1+x2)+2)/4;
 8001130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	4413      	add	r3, r2
 8001136:	3302      	adds	r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	da00      	bge.n	800113e <BMP180_Read_Data+0x29e>
 800113c:	3303      	adds	r3, #3
 800113e:	109b      	asrs	r3, r3, #2
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
	b4=BMP_180->AC4*(uint32_t)(x3+32768)/pow(2,15);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	88db      	ldrh	r3, [r3, #6]
 8001146:	461a      	mov	r2, r3
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f93e 	bl	80003d4 <__aeabi_ui2d>
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <BMP180_Read_Data+0x2fc>)
 800115e:	f7ff fadd 	bl	800071c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc85 	bl	8000a78 <__aeabi_d2uiz>
 800116e:	4603      	mov	r3, r0
 8001170:	61fb      	str	r3, [r7, #28]
	b7=(uint32_t)(UP-b3)*(50000>>3);
 8001172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	461a      	mov	r2, r3
 800117a:	f641 036a 	movw	r3, #6250	; 0x186a
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	61bb      	str	r3, [r7, #24]
	if(b7<0x80000000){
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db16      	blt.n	80011b8 <BMP180_Read_Data+0x318>
		p=(b7*2)/b4;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	005a      	lsls	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
 8001196:	e015      	b.n	80011c4 <BMP180_Read_Data+0x324>
 8001198:	2000008c 	.word	0x2000008c
 800119c:	40e00000 	.word	0x40e00000
 80011a0:	40a00000 	.word	0x40a00000
 80011a4:	40300000 	.word	0x40300000
 80011a8:	66666667 	.word	0x66666667
 80011ac:	40b00000 	.word	0x40b00000
 80011b0:	40c00000 	.word	0x40c00000
 80011b4:	40f00000 	.word	0x40f00000
	}else{
		p=(b7/b4)*2;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	x1=(p/pow(2,8)*p/pow(2,8));
 80011c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011c6:	f7ff f915 	bl	80003f4 <__aeabi_i2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b58      	ldr	r3, [pc, #352]	; (8001330 <BMP180_Read_Data+0x490>)
 80011d0:	f7ff faa4 	bl	800071c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4614      	mov	r4, r2
 80011da:	461d      	mov	r5, r3
 80011dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011de:	f7ff f909 	bl	80003f4 <__aeabi_i2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4620      	mov	r0, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	f7ff f96d 	bl	80004c8 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <BMP180_Read_Data+0x490>)
 80011fc:	f7ff fa8e 	bl	800071c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fc0e 	bl	8000a28 <__aeabi_d2iz>
 800120c:	4603      	mov	r3, r0
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
	x1=(x1*3038)/pow(2,16);
 8001210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001212:	f640 32de 	movw	r2, #3038	; 0xbde
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8ea 	bl	80003f4 <__aeabi_i2d>
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <BMP180_Read_Data+0x494>)
 8001226:	f7ff fa79 	bl	800071c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fbf9 	bl	8000a28 <__aeabi_d2iz>
 8001236:	4603      	mov	r3, r0
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
	x2=(-7357*p)/pow(2,16);
 800123a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800123c:	4a3e      	ldr	r2, [pc, #248]	; (8001338 <BMP180_Read_Data+0x498>)
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8d6 	bl	80003f4 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <BMP180_Read_Data+0x494>)
 800124e:	f7ff fa65 	bl	800071c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fbe5 	bl	8000a28 <__aeabi_d2iz>
 800125e:	4603      	mov	r3, r0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
	p=(p+(x1+x2+3791)/pow(2,4));
 8001262:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001264:	f7ff f8c6 	bl	80003f4 <__aeabi_i2d>
 8001268:	4604      	mov	r4, r0
 800126a:	460d      	mov	r5, r1
 800126c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800126e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001270:	4413      	add	r3, r2
 8001272:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8bc 	bl	80003f4 <__aeabi_i2d>
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <BMP180_Read_Data+0x49c>)
 8001282:	f7ff fa4b 	bl	800071c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7fe ff65 	bl	800015c <__adddf3>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fbc5 	bl	8000a28 <__aeabi_d2iz>
 800129e:	4603      	mov	r3, r0
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
	BMP_180->Pressure=p;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012a6:	619a      	str	r2, [r3, #24]

	BMP_180->Altitude=44330*(1-(pow(((p/100)/1013.25),(1/5.255))));
 80012a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012aa:	4a25      	ldr	r2, [pc, #148]	; (8001340 <BMP180_Read_Data+0x4a0>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	1152      	asrs	r2, r2, #5
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f89c 	bl	80003f4 <__aeabi_i2d>
 80012bc:	a316      	add	r3, pc, #88	; (adr r3, 8001318 <BMP180_Read_Data+0x478>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fa2b 	bl	800071c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	a314      	add	r3, pc, #80	; (adr r3, 8001320 <BMP180_Read_Data+0x480>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f002 f93a 	bl	800354c <pow>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	f04f 0000 	mov.w	r0, #0
 80012e0:	4918      	ldr	r1, [pc, #96]	; (8001344 <BMP180_Read_Data+0x4a4>)
 80012e2:	f7fe ff39 	bl	8000158 <__aeabi_dsub>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	a30e      	add	r3, pc, #56	; (adr r3, 8001328 <BMP180_Read_Data+0x488>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f8e8 	bl	80004c8 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbda 	bl	8000ab8 <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	621a      	str	r2, [r3, #32]

}
 800130a:	bf00      	nop
 800130c:	3748      	adds	r7, #72	; 0x48
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	00000000 	.word	0x00000000
 800131c:	408faa00 	.word	0x408faa00
 8001320:	ccd9456c 	.word	0xccd9456c
 8001324:	3fc85b95 	.word	0x3fc85b95
 8001328:	00000000 	.word	0x00000000
 800132c:	40e5a540 	.word	0x40e5a540
 8001330:	40700000 	.word	0x40700000
 8001334:	40f00000 	.word	0x40f00000
 8001338:	ffffe343 	.word	0xffffe343
 800133c:	40300000 	.word	0x40300000
 8001340:	51eb851f 	.word	0x51eb851f
 8001344:	3ff00000 	.word	0x3ff00000

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134c:	f000 f988 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f824 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001354:	f000 f88c 	bl	8001470 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001358:	f000 f85c 	bl	8001414 <MX_I2C1_Init>

  HAL_Delay(500);
 800135c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001360:	f000 f9e0 	bl	8001724 <HAL_Delay>
  /* USER CODE BEGIN 2 */
  BMP180_Read_Cali_Data(&BMP_180);
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <main+0x48>)
 8001366:	f7ff fd1b 	bl	8000da0 <BMP180_Read_Cali_Data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BMP180_Read_Id();
 800136a:	f7ff fd03 	bl	8000d74 <BMP180_Read_Id>
	  BMP180_Read_Data(&BMP_180);
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <main+0x48>)
 8001370:	f7ff fd96 	bl	8000ea0 <BMP180_Read_Data>
	  alt=BMP_180.Altitude;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <main+0x48>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <main+0x4c>)
 800137a:	6013      	str	r3, [r2, #0]
	  temp=BMP_180.Temperature;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <main+0x48>)
 800137e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fca2 	bl	8000ccc <__aeabi_i2f>
 8001388:	4603      	mov	r3, r0
 800138a:	4a03      	ldr	r2, [pc, #12]	; (8001398 <main+0x50>)
 800138c:	6013      	str	r3, [r2, #0]
	  BMP180_Read_Id();
 800138e:	e7ec      	b.n	800136a <main+0x22>
 8001390:	200000e0 	.word	0x200000e0
 8001394:	20000104 	.word	0x20000104
 8001398:	20000108 	.word	0x20000108

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	2228      	movs	r2, #40	; 0x28
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 f89c 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c6:	2310      	movs	r3, #16
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fc8c 	bl	8002cf0 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013de:	f000 f875 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fefa 	bl	80031f4 <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001406:	f000 f861 	bl	80014cc <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3740      	adds	r7, #64	; 0x40
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f000 fbf3 	bl	8001c3c <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f836 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000008c 	.word	0x2000008c
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_GPIO_Init+0x58>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_GPIO_Init+0x58>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_GPIO_Init+0x58>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_GPIO_Init+0x58>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <MX_GPIO_Init+0x58>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_GPIO_Init+0x58>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_GPIO_Init+0x58>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <MX_GPIO_Init+0x58>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <MX_GPIO_Init+0x58>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_MspInit+0x5c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <HAL_MspInit+0x5c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_MspInit+0x5c>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_MspInit+0x5c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_MspInit+0x60>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_MspInit+0x60>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_I2C_MspInit+0x70>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d123      	bne.n	80015a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_I2C_MspInit+0x74>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <HAL_I2C_MspInit+0x74>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_I2C_MspInit+0x74>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001574:	23c0      	movs	r3, #192	; 0xc0
 8001576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <HAL_I2C_MspInit+0x78>)
 8001588:	f000 f9d4 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_I2C_MspInit+0x74>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_I2C_MspInit+0x74>)
 8001592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001596:	61d3      	str	r3, [r2, #28]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_I2C_MspInit+0x74>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010c00 	.word	0x40010c00

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f875 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}

08001606 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
	...

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff fff7 	bl	8001606 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800161a:	490c      	ldr	r1, [pc, #48]	; (800164c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001630:	4c09      	ldr	r4, [pc, #36]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f001 ff61 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff fe81 	bl	8001348 <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001650:	080043e0 	.word	0x080043e0
  ldr r2, =_sbss
 8001654:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001658:	20000248 	.word	0x20000248

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x28>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f92b 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff ff2c 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f935 	bl	800191a <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f90b 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_IncTick+0x20>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000008 	.word	0x20000008
 800170c:	2000010c 	.word	0x2000010c

08001710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <HAL_GetTick+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	2000010c 	.word	0x2000010c

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff fff0 	bl	8001710 <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffe0 	bl	8001710 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff90 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff49 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff5e 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff90 	bl	8001824 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5f 	bl	80017d0 <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffb0 	bl	8001888 <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b08b      	sub	sp, #44	; 0x2c
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	e169      	b.n	8001c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001948:	2201      	movs	r2, #1
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8158 	bne.w	8001c16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a9a      	ldr	r2, [pc, #616]	; (8001bd4 <HAL_GPIO_Init+0x2a0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d05e      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001970:	4a98      	ldr	r2, [pc, #608]	; (8001bd4 <HAL_GPIO_Init+0x2a0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d875      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001976:	4a98      	ldr	r2, [pc, #608]	; (8001bd8 <HAL_GPIO_Init+0x2a4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d058      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 800197c:	4a96      	ldr	r2, [pc, #600]	; (8001bd8 <HAL_GPIO_Init+0x2a4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d86f      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001982:	4a96      	ldr	r2, [pc, #600]	; (8001bdc <HAL_GPIO_Init+0x2a8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d052      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001988:	4a94      	ldr	r2, [pc, #592]	; (8001bdc <HAL_GPIO_Init+0x2a8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d869      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800198e:	4a94      	ldr	r2, [pc, #592]	; (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d04c      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001994:	4a92      	ldr	r2, [pc, #584]	; (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d863      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800199a:	4a92      	ldr	r2, [pc, #584]	; (8001be4 <HAL_GPIO_Init+0x2b0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d046      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 80019a0:	4a90      	ldr	r2, [pc, #576]	; (8001be4 <HAL_GPIO_Init+0x2b0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d85d      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d82a      	bhi.n	8001a00 <HAL_GPIO_Init+0xcc>
 80019aa:	2b12      	cmp	r3, #18
 80019ac:	d859      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_GPIO_Init+0x80>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a09 	.word	0x08001a09
 80019bc:	08001a1b 	.word	0x08001a1b
 80019c0:	08001a5d 	.word	0x08001a5d
 80019c4:	08001a63 	.word	0x08001a63
 80019c8:	08001a63 	.word	0x08001a63
 80019cc:	08001a63 	.word	0x08001a63
 80019d0:	08001a63 	.word	0x08001a63
 80019d4:	08001a63 	.word	0x08001a63
 80019d8:	08001a63 	.word	0x08001a63
 80019dc:	08001a63 	.word	0x08001a63
 80019e0:	08001a63 	.word	0x08001a63
 80019e4:	08001a63 	.word	0x08001a63
 80019e8:	08001a63 	.word	0x08001a63
 80019ec:	08001a63 	.word	0x08001a63
 80019f0:	08001a63 	.word	0x08001a63
 80019f4:	08001a63 	.word	0x08001a63
 80019f8:	08001a11 	.word	0x08001a11
 80019fc:	08001a25 	.word	0x08001a25
 8001a00:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <HAL_GPIO_Init+0x2b4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a06:	e02c      	b.n	8001a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e029      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	3304      	adds	r3, #4
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e024      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e01f      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	330c      	adds	r3, #12
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e01a      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a36:	2304      	movs	r3, #4
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e013      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	611a      	str	r2, [r3, #16]
          break;
 8001a4e:	e009      	b.n	8001a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	615a      	str	r2, [r3, #20]
          break;
 8001a5a:	e003      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          break;
 8001a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d801      	bhi.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_Init+0x13e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3304      	adds	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	d802      	bhi.n	8001a80 <HAL_GPIO_Init+0x14c>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x152>
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	3b08      	subs	r3, #8
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	6a39      	ldr	r1, [r7, #32]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80b1 	beq.w	8001c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001acc:	4a48      	ldr	r2, [pc, #288]	; (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_GPIO_Init+0x1ec>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3f      	ldr	r2, [pc, #252]	; (8001bf8 <HAL_GPIO_Init+0x2c4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_GPIO_Init+0x1e8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <HAL_GPIO_Init+0x2c8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <HAL_GPIO_Init+0x1e4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3d      	ldr	r2, [pc, #244]	; (8001c00 <HAL_GPIO_Init+0x2cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_GPIO_Init+0x1e0>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b20:	2300      	movs	r3, #0
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b32:	492f      	ldr	r1, [pc, #188]	; (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	492c      	ldr	r1, [pc, #176]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4928      	ldr	r1, [pc, #160]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	491e      	ldr	r1, [pc, #120]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4918      	ldr	r1, [pc, #96]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4914      	ldr	r1, [pc, #80]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d021      	beq.n	8001c08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e021      	b.n	8001c16 <HAL_GPIO_Init+0x2e2>
 8001bd2:	bf00      	nop
 8001bd4:	10320000 	.word	0x10320000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10220000 	.word	0x10220000
 8001be0:	10210000 	.word	0x10210000
 8001be4:	10120000 	.word	0x10120000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40011400 	.word	0x40011400
 8001c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	4909      	ldr	r1, [pc, #36]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f ae8e 	bne.w	8001948 <HAL_GPIO_Init+0x14>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	372c      	adds	r7, #44	; 0x2c
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e12b      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fc6a 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca0:	f001 fbf0 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4a81      	ldr	r2, [pc, #516]	; (8001eb0 <HAL_I2C_Init+0x274>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d807      	bhi.n	8001cc0 <HAL_I2C_Init+0x84>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a80      	ldr	r2, [pc, #512]	; (8001eb4 <HAL_I2C_Init+0x278>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e006      	b.n	8001cce <HAL_I2C_Init+0x92>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a7d      	ldr	r2, [pc, #500]	; (8001eb8 <HAL_I2C_Init+0x27c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0e7      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a78      	ldr	r2, [pc, #480]	; (8001ebc <HAL_I2C_Init+0x280>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_I2C_Init+0x274>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d802      	bhi.n	8001d10 <HAL_I2C_Init+0xd4>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	e009      	b.n	8001d24 <HAL_I2C_Init+0xe8>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_I2C_Init+0x284>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	3301      	adds	r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	495c      	ldr	r1, [pc, #368]	; (8001eb0 <HAL_I2C_Init+0x274>)
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d819      	bhi.n	8001d78 <HAL_I2C_Init+0x13c>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e59      	subs	r1, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d58:	400b      	ands	r3, r1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_I2C_Init+0x138>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e59      	subs	r1, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	e051      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e04f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_I2C_Init+0x168>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e012      	b.n	8001dca <HAL_I2C_Init+0x18e>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x196>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e022      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10e      	bne.n	8001df8 <HAL_I2C_Init+0x1bc>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e58      	subs	r0, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	0099      	lsls	r1, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6809      	ldr	r1, [r1, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6911      	ldr	r1, [r2, #16]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	000186a0 	.word	0x000186a0
 8001eb4:	001e847f 	.word	0x001e847f
 8001eb8:	003d08ff 	.word	0x003d08ff
 8001ebc:	431bde83 	.word	0x431bde83
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ede:	f7ff fc17 	bl	8001710 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80d9 	bne.w	80020a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2319      	movs	r3, #25
 8001ef8:	2201      	movs	r2, #1
 8001efa:	496d      	ldr	r1, [pc, #436]	; (80020b0 <HAL_I2C_Mem_Write+0x1ec>)
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fcc1 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e0cc      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Mem_Write+0x56>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0c5      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d007      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2221      	movs	r2, #33	; 0x21
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f82:	88f8      	ldrh	r0, [r7, #6]
 8001f84:	893a      	ldrh	r2, [r7, #8]
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 faf8 	bl	8002588 <I2C_RequestMemoryWrite>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d052      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e081      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fd86 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d107      	bne.n	8001fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06b      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d11b      	bne.n	8002044 <HAL_I2C_Mem_Write+0x180>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1aa      	bne.n	8001fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fd79 	bl	8002b48 <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d107      	bne.n	8002074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e016      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	00100002 	.word	0x00100002
 80020b4:	ffff0000 	.word	0xffff0000

080020b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d6:	f7ff fb1b 	bl	8001710 <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	f040 8244 	bne.w	8002572 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2319      	movs	r3, #25
 80020f0:	2201      	movs	r2, #1
 80020f2:	4982      	ldr	r1, [pc, #520]	; (80022fc <HAL_I2C_Mem_Read+0x244>)
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fbc5 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	e237      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_I2C_Mem_Read+0x5a>
 800210e:	2302      	movs	r3, #2
 8002110:	e230      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d007      	beq.n	8002138 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2222      	movs	r2, #34	; 0x22
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2240      	movs	r2, #64	; 0x40
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a62      	ldr	r2, [pc, #392]	; (8002300 <HAL_I2C_Mem_Read+0x248>)
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800217a:	88f8      	ldrh	r0, [r7, #6]
 800217c:	893a      	ldrh	r2, [r7, #8]
 800217e:	8979      	ldrh	r1, [r7, #10]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4603      	mov	r3, r0
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fa92 	bl	80026b4 <I2C_RequestMemoryRead>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1ec      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d113      	bne.n	80021ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e1c0      	b.n	800254c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d11e      	bne.n	8002210 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e2:	b672      	cpsid	i
}
 80021e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800220c:	b662      	cpsie	i
}
 800220e:	e035      	b.n	800227c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	2b02      	cmp	r3, #2
 8002216:	d11e      	bne.n	8002256 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002226:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002250:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002252:	b662      	cpsie	i
}
 8002254:	e012      	b.n	800227c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002264:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800227c:	e166      	b.n	800254c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	2b03      	cmp	r3, #3
 8002284:	f200 811f 	bhi.w	80024c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	2b01      	cmp	r3, #1
 800228e:	d123      	bne.n	80022d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fc9f 	bl	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e167      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022d6:	e139      	b.n	800254c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d152      	bne.n	8002386 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	2200      	movs	r2, #0
 80022e8:	4906      	ldr	r1, [pc, #24]	; (8002304 <HAL_I2C_Mem_Read+0x24c>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 faca 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e13c      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
 80022fa:	bf00      	nop
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000
 8002304:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800234e:	b662      	cpsie	i
}
 8002350:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002384:	e0e2      	b.n	800254c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238c:	2200      	movs	r2, #0
 800238e:	497b      	ldr	r1, [pc, #492]	; (800257c <HAL_I2C_Mem_Read+0x4c4>)
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fa77 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0e9      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023e6:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_I2C_Mem_Read+0x4c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	08db      	lsrs	r3, r3, #3
 80023ec:	4a65      	ldr	r2, [pc, #404]	; (8002584 <HAL_I2C_Mem_Read+0x4cc>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0a1a      	lsrs	r2, r3, #8
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00da      	lsls	r2, r3, #3
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	3b01      	subs	r3, #1
 8002404:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d118      	bne.n	800243e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0220 	orr.w	r2, r3, #32
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800242e:	b662      	cpsie	i
}
 8002430:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e09a      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d1d9      	bne.n	8002400 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800248e:	b662      	cpsie	i
}
 8002490:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024c4:	e042      	b.n	800254c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fb84 	bl	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e04c      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d118      	bne.n	800254c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f ae94 	bne.w	800227e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	00010004 	.word	0x00010004
 8002580:	20000000 	.word	0x20000000
 8002584:	14f8b589 	.word	0x14f8b589

08002588 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f960 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d8:	d103      	bne.n	80025e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e05f      	b.n	80026a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	492d      	ldr	r1, [pc, #180]	; (80026b0 <I2C_RequestMemoryWrite+0x128>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f9bb 	bl	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e04c      	b.n	80026a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	6a39      	ldr	r1, [r7, #32]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa46 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2b04      	cmp	r3, #4
 8002638:	d107      	bne.n	800264a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002648:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e02b      	b.n	80026a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002654:	893b      	ldrh	r3, [r7, #8]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	e021      	b.n	80026a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002670:	6a39      	ldr	r1, [r7, #32]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa20 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b04      	cmp	r3, #4
 8002684:	d107      	bne.n	8002696 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002694:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e005      	b.n	80026a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	00010002 	.word	0x00010002

080026b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	4608      	mov	r0, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	817b      	strh	r3, [r7, #10]
 80026c6:	460b      	mov	r3, r1
 80026c8:	813b      	strh	r3, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f8c2 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002714:	d103      	bne.n	800271e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0aa      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	4952      	ldr	r1, [pc, #328]	; (8002880 <I2C_RequestMemoryRead+0x1cc>)
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f91d 	bl	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e097      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	6a39      	ldr	r1, [r7, #32]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9a8 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b04      	cmp	r3, #4
 8002774:	d107      	bne.n	8002786 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e076      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002790:	893b      	ldrh	r3, [r7, #8]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	e021      	b.n	80027e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800279c:	893b      	ldrh	r3, [r7, #8]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	6a39      	ldr	r1, [r7, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f982 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d107      	bne.n	80027d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e050      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027d6:	893b      	ldrh	r3, [r7, #8]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e2:	6a39      	ldr	r1, [r7, #32]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f967 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00d      	beq.n	800280c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d107      	bne.n	8002808 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e035      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2200      	movs	r2, #0
 8002824:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f82b 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00d      	beq.n	8002850 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	d103      	bne.n	800284c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e013      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	6a3a      	ldr	r2, [r7, #32]
 8002864:	4906      	ldr	r1, [pc, #24]	; (8002880 <I2C_RequestMemoryRead+0x1cc>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f886 	bl	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	00010002 	.word	0x00010002

08002884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002894:	e048      	b.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d044      	beq.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe ff37 	bl	8001710 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d139      	bne.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10d      	bne.n	80028da <I2C_WaitOnFlagUntilTimeout+0x56>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	43da      	mvns	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	e00c      	b.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d116      	bne.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e023      	b.n	8002970 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d10d      	bne.n	800294e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	43da      	mvns	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4013      	ands	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	e00c      	b.n	8002968 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	d093      	beq.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002986:	e071      	b.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002996:	d123      	bne.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e067      	b.n	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d041      	beq.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e8:	f7fe fe92 	bl	8001710 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d302      	bcc.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d136      	bne.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10c      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e00b      	b.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e021      	b.n	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	0c1b      	lsrs	r3, r3, #16
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d10c      	bne.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e00b      	b.n	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f af6d 	bne.w	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac4:	e034      	b.n	8002b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8e3 	bl	8002c92 <I2C_IsAcknowledgeFailed>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e034      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d028      	beq.n	8002b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7fe fe17 	bl	8001710 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11d      	bne.n	8002b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d016      	beq.n	8002b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b80      	cmp	r3, #128	; 0x80
 8002b3c:	d1c3      	bne.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b54:	e034      	b.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f89b 	bl	8002c92 <I2C_IsAcknowledgeFailed>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d028      	beq.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fdcf 	bl	8001710 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d11d      	bne.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d016      	beq.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e007      	b.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d1c3      	bne.n	8002b56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be4:	e049      	b.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d119      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0210 	mvn.w	r2, #16
 8002bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e030      	b.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c28:	f7fe fd72 	bl	8001710 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11d      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d016      	beq.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e007      	b.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d1ae      	bne.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	d11b      	bne.n	8002ce2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e272      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8087 	beq.w	8002e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d10:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d00c      	beq.n	8002d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d1c:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d112      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5e>
 8002d28:	4b8c      	ldr	r3, [pc, #560]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x12c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d168      	bne.n	8002e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e24c      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x76>
 8002d58:	4b80      	ldr	r3, [pc, #512]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7f      	ldr	r2, [pc, #508]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e02e      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7a      	ldr	r2, [pc, #488]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a77      	ldr	r2, [pc, #476]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0xbc>
 8002d92:	4b72      	ldr	r3, [pc, #456]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a71      	ldr	r2, [pc, #452]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002dac:	4b6b      	ldr	r3, [pc, #428]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fca0 	bl	8001710 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fc9c 	bl	8001710 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e200      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe4>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fc8c 	bl	8001710 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fc88 	bl	8001710 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1ec      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x10c>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x18c>
 8002e42:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x176>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1c0      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4939      	ldr	r1, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_OscConfig+0x270>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fc41 	bl	8001710 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe fc3d 	bl	8001710 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1a1      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4927      	ldr	r1, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fc20 	bl	8001710 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fc1c 	bl	8001710 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e180      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03a      	beq.n	8002f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d019      	beq.n	8002f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fc00 	bl	8001710 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe fbfc 	bl	8001710 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e160      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f32:	2001      	movs	r0, #1
 8002f34:	f000 faba 	bl	80034ac <RCC_Delay>
 8002f38:	e01c      	b.n	8002f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f40:	f7fe fbe6 	bl	8001710 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f46:	e00f      	b.n	8002f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f48:	f7fe fbe2 	bl	8001710 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d908      	bls.n	8002f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e146      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	42420000 	.word	0x42420000
 8002f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b92      	ldr	r3, [pc, #584]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e9      	bne.n	8002f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a6 	beq.w	80030ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b88      	ldr	r3, [pc, #544]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4a87      	ldr	r2, [pc, #540]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	61d3      	str	r3, [r2, #28]
 8002f9e:	4b85      	ldr	r3, [pc, #532]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fba3 	bl	8001710 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7fe fb9f 	bl	8001710 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	; 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e103      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b75      	ldr	r3, [pc, #468]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x312>
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4a6e      	ldr	r2, [pc, #440]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
 8003000:	e02d      	b.n	800305e <HAL_RCC_OscConfig+0x36e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x334>
 800300a:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4a69      	ldr	r2, [pc, #420]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6213      	str	r3, [r2, #32]
 8003016:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f023 0304 	bic.w	r3, r3, #4
 8003020:	6213      	str	r3, [r2, #32]
 8003022:	e01c      	b.n	800305e <HAL_RCC_OscConfig+0x36e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d10c      	bne.n	8003046 <HAL_RCC_OscConfig+0x356>
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4a60      	ldr	r2, [pc, #384]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6213      	str	r3, [r2, #32]
 8003038:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	e00b      	b.n	800305e <HAL_RCC_OscConfig+0x36e>
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a5a      	ldr	r2, [pc, #360]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d015      	beq.n	8003092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fe fb53 	bl	8001710 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fb4f 	bl	8001710 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0b1      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ee      	beq.n	800306e <HAL_RCC_OscConfig+0x37e>
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe fb3d 	bl	8001710 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe fb39 	bl	8001710 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e09b      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b0:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ee      	bne.n	800309a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8087 	beq.w	80031e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d061      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d146      	bne.n	800317a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fe fb0d 	bl	8001710 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fb09 	bl	8001710 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e06d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310c:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4921      	ldr	r1, [pc, #132]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a19      	ldr	r1, [r3, #32]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	430b      	orrs	r3, r1
 8003146:	491b      	ldr	r1, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x4cc>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe fadd 	bl	8001710 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe fad9 	bl	8001710 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x46a>
 8003178:	e035      	b.n	80031e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_OscConfig+0x4cc>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fac6 	bl	8001710 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fac2 	bl	8001710 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e026      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x498>
 80031a6:	e01e      	b.n	80031e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e019      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40007000 	.word	0x40007000
 80031bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x500>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0d0      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d910      	bls.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4965      	ldr	r1, [pc, #404]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0b8      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800325a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	494d      	ldr	r1, [pc, #308]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d040      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d115      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07f      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e073      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06b      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4936      	ldr	r1, [pc, #216]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fe fa14 	bl	8001710 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe fa10 	bl	8001710 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e053      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d210      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	4922      	ldr	r1, [pc, #136]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e032      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4916      	ldr	r1, [pc, #88]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003382:	f000 f821 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003386:	4602      	mov	r2, r0
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	490a      	ldr	r1, [pc, #40]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	5ccb      	ldrb	r3, [r1, r3]
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1cc>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f972 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08004378 	.word	0x08004378
 80033c0:	20000000 	.word	0x20000000
 80033c4:	20000004 	.word	0x20000004

080033c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCC_GetSysClockFreq+0x94>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x30>
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x36>
 80033f6:	e027      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fa:	613b      	str	r3, [r7, #16]
      break;
 80033fc:	e027      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0c9b      	lsrs	r3, r3, #18
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_GetSysClockFreq+0x94>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0c5b      	lsrs	r3, r3, #17
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e004      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_RCC_GetSysClockFreq+0xa4>)
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	613b      	str	r3, [r7, #16]
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	693b      	ldr	r3, [r7, #16]
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	08004390 	.word	0x08004390
 8003468:	080043a0 	.word	0x080043a0
 800346c:	003d0900 	.word	0x003d0900

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b02      	ldr	r3, [pc, #8]	; (8003480 <HAL_RCC_GetHCLKFreq+0x10>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	20000000 	.word	0x20000000

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003488:	f7ff fff2 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08004388 	.word	0x08004388

080034ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <RCC_Delay+0x34>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <RCC_Delay+0x38>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0a5b      	lsrs	r3, r3, #9
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034c8:	bf00      	nop
  }
  while (Delay --);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1e5a      	subs	r2, r3, #1
 80034ce:	60fa      	str	r2, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f9      	bne.n	80034c8 <RCC_Delay+0x1c>
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	20000000 	.word	0x20000000
 80034e4:	10624dd3 	.word	0x10624dd3

080034e8 <memset>:
 80034e8:	4603      	mov	r3, r0
 80034ea:	4402      	add	r2, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <__errno>:
 80034f8:	4b01      	ldr	r3, [pc, #4]	; (8003500 <__errno+0x8>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000058 	.word	0x20000058

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	2600      	movs	r6, #0
 8003508:	4d0c      	ldr	r5, [pc, #48]	; (800353c <__libc_init_array+0x38>)
 800350a:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350c:	1b64      	subs	r4, r4, r5
 800350e:	10a4      	asrs	r4, r4, #2
 8003510:	42a6      	cmp	r6, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	f000 ff22 	bl	800435c <_init>
 8003518:	2600      	movs	r6, #0
 800351a:	4d0a      	ldr	r5, [pc, #40]	; (8003544 <__libc_init_array+0x40>)
 800351c:	4c0a      	ldr	r4, [pc, #40]	; (8003548 <__libc_init_array+0x44>)
 800351e:	1b64      	subs	r4, r4, r5
 8003520:	10a4      	asrs	r4, r4, #2
 8003522:	42a6      	cmp	r6, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f855 3b04 	ldr.w	r3, [r5], #4
 800352c:	4798      	blx	r3
 800352e:	3601      	adds	r6, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f855 3b04 	ldr.w	r3, [r5], #4
 8003536:	4798      	blx	r3
 8003538:	3601      	adds	r6, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	080043d8 	.word	0x080043d8
 8003540:	080043d8 	.word	0x080043d8
 8003544:	080043d8 	.word	0x080043d8
 8003548:	080043dc 	.word	0x080043dc

0800354c <pow>:
 800354c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003550:	4614      	mov	r4, r2
 8003552:	461d      	mov	r5, r3
 8003554:	4680      	mov	r8, r0
 8003556:	4689      	mov	r9, r1
 8003558:	f000 f866 	bl	8003628 <__ieee754_pow>
 800355c:	4622      	mov	r2, r4
 800355e:	4606      	mov	r6, r0
 8003560:	460f      	mov	r7, r1
 8003562:	462b      	mov	r3, r5
 8003564:	4620      	mov	r0, r4
 8003566:	4629      	mov	r1, r5
 8003568:	f7fd fa48 	bl	80009fc <__aeabi_dcmpun>
 800356c:	bbc8      	cbnz	r0, 80035e2 <pow+0x96>
 800356e:	2200      	movs	r2, #0
 8003570:	2300      	movs	r3, #0
 8003572:	4640      	mov	r0, r8
 8003574:	4649      	mov	r1, r9
 8003576:	f7fd fa0f 	bl	8000998 <__aeabi_dcmpeq>
 800357a:	b1b8      	cbz	r0, 80035ac <pow+0x60>
 800357c:	2200      	movs	r2, #0
 800357e:	2300      	movs	r3, #0
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fd fa08 	bl	8000998 <__aeabi_dcmpeq>
 8003588:	2800      	cmp	r0, #0
 800358a:	d141      	bne.n	8003610 <pow+0xc4>
 800358c:	4620      	mov	r0, r4
 800358e:	4629      	mov	r1, r5
 8003590:	f000 f844 	bl	800361c <finite>
 8003594:	b328      	cbz	r0, 80035e2 <pow+0x96>
 8003596:	2200      	movs	r2, #0
 8003598:	2300      	movs	r3, #0
 800359a:	4620      	mov	r0, r4
 800359c:	4629      	mov	r1, r5
 800359e:	f7fd fa05 	bl	80009ac <__aeabi_dcmplt>
 80035a2:	b1f0      	cbz	r0, 80035e2 <pow+0x96>
 80035a4:	f7ff ffa8 	bl	80034f8 <__errno>
 80035a8:	2322      	movs	r3, #34	; 0x22
 80035aa:	e019      	b.n	80035e0 <pow+0x94>
 80035ac:	4630      	mov	r0, r6
 80035ae:	4639      	mov	r1, r7
 80035b0:	f000 f834 	bl	800361c <finite>
 80035b4:	b9c8      	cbnz	r0, 80035ea <pow+0x9e>
 80035b6:	4640      	mov	r0, r8
 80035b8:	4649      	mov	r1, r9
 80035ba:	f000 f82f 	bl	800361c <finite>
 80035be:	b1a0      	cbz	r0, 80035ea <pow+0x9e>
 80035c0:	4620      	mov	r0, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	f000 f82a 	bl	800361c <finite>
 80035c8:	b178      	cbz	r0, 80035ea <pow+0x9e>
 80035ca:	4632      	mov	r2, r6
 80035cc:	463b      	mov	r3, r7
 80035ce:	4630      	mov	r0, r6
 80035d0:	4639      	mov	r1, r7
 80035d2:	f7fd fa13 	bl	80009fc <__aeabi_dcmpun>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d0e4      	beq.n	80035a4 <pow+0x58>
 80035da:	f7ff ff8d 	bl	80034f8 <__errno>
 80035de:	2321      	movs	r3, #33	; 0x21
 80035e0:	6003      	str	r3, [r0, #0]
 80035e2:	4630      	mov	r0, r6
 80035e4:	4639      	mov	r1, r7
 80035e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ea:	2200      	movs	r2, #0
 80035ec:	2300      	movs	r3, #0
 80035ee:	4630      	mov	r0, r6
 80035f0:	4639      	mov	r1, r7
 80035f2:	f7fd f9d1 	bl	8000998 <__aeabi_dcmpeq>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d0f3      	beq.n	80035e2 <pow+0x96>
 80035fa:	4640      	mov	r0, r8
 80035fc:	4649      	mov	r1, r9
 80035fe:	f000 f80d 	bl	800361c <finite>
 8003602:	2800      	cmp	r0, #0
 8003604:	d0ed      	beq.n	80035e2 <pow+0x96>
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f000 f807 	bl	800361c <finite>
 800360e:	e7c8      	b.n	80035a2 <pow+0x56>
 8003610:	2600      	movs	r6, #0
 8003612:	4f01      	ldr	r7, [pc, #4]	; (8003618 <pow+0xcc>)
 8003614:	e7e5      	b.n	80035e2 <pow+0x96>
 8003616:	bf00      	nop
 8003618:	3ff00000 	.word	0x3ff00000

0800361c <finite>:
 800361c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003620:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003624:	0fc0      	lsrs	r0, r0, #31
 8003626:	4770      	bx	lr

08003628 <__ieee754_pow>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	b093      	sub	sp, #76	; 0x4c
 800362e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003632:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003636:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800363a:	4689      	mov	r9, r1
 800363c:	ea56 0102 	orrs.w	r1, r6, r2
 8003640:	4680      	mov	r8, r0
 8003642:	d111      	bne.n	8003668 <__ieee754_pow+0x40>
 8003644:	1803      	adds	r3, r0, r0
 8003646:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800364a:	4152      	adcs	r2, r2
 800364c:	4299      	cmp	r1, r3
 800364e:	4b82      	ldr	r3, [pc, #520]	; (8003858 <__ieee754_pow+0x230>)
 8003650:	4193      	sbcs	r3, r2
 8003652:	f080 84ba 	bcs.w	8003fca <__ieee754_pow+0x9a2>
 8003656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800365a:	4640      	mov	r0, r8
 800365c:	4649      	mov	r1, r9
 800365e:	f7fc fd7d 	bl	800015c <__adddf3>
 8003662:	4683      	mov	fp, r0
 8003664:	468c      	mov	ip, r1
 8003666:	e06f      	b.n	8003748 <__ieee754_pow+0x120>
 8003668:	4b7c      	ldr	r3, [pc, #496]	; (800385c <__ieee754_pow+0x234>)
 800366a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800366e:	429c      	cmp	r4, r3
 8003670:	464d      	mov	r5, r9
 8003672:	4682      	mov	sl, r0
 8003674:	dc06      	bgt.n	8003684 <__ieee754_pow+0x5c>
 8003676:	d101      	bne.n	800367c <__ieee754_pow+0x54>
 8003678:	2800      	cmp	r0, #0
 800367a:	d1ec      	bne.n	8003656 <__ieee754_pow+0x2e>
 800367c:	429e      	cmp	r6, r3
 800367e:	dc01      	bgt.n	8003684 <__ieee754_pow+0x5c>
 8003680:	d10f      	bne.n	80036a2 <__ieee754_pow+0x7a>
 8003682:	b172      	cbz	r2, 80036a2 <__ieee754_pow+0x7a>
 8003684:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003688:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800368c:	ea55 050a 	orrs.w	r5, r5, sl
 8003690:	d1e1      	bne.n	8003656 <__ieee754_pow+0x2e>
 8003692:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003696:	18db      	adds	r3, r3, r3
 8003698:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800369c:	4152      	adcs	r2, r2
 800369e:	429d      	cmp	r5, r3
 80036a0:	e7d5      	b.n	800364e <__ieee754_pow+0x26>
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	da39      	bge.n	800371a <__ieee754_pow+0xf2>
 80036a6:	4b6e      	ldr	r3, [pc, #440]	; (8003860 <__ieee754_pow+0x238>)
 80036a8:	429e      	cmp	r6, r3
 80036aa:	dc52      	bgt.n	8003752 <__ieee754_pow+0x12a>
 80036ac:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80036b0:	429e      	cmp	r6, r3
 80036b2:	f340 849d 	ble.w	8003ff0 <__ieee754_pow+0x9c8>
 80036b6:	1533      	asrs	r3, r6, #20
 80036b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80036bc:	2b14      	cmp	r3, #20
 80036be:	dd0f      	ble.n	80036e0 <__ieee754_pow+0xb8>
 80036c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80036c4:	fa22 f103 	lsr.w	r1, r2, r3
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f040 848f 	bne.w	8003ff0 <__ieee754_pow+0x9c8>
 80036d2:	f001 0101 	and.w	r1, r1, #1
 80036d6:	f1c1 0302 	rsb	r3, r1, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	b182      	cbz	r2, 8003700 <__ieee754_pow+0xd8>
 80036de:	e05d      	b.n	800379c <__ieee754_pow+0x174>
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	d159      	bne.n	8003798 <__ieee754_pow+0x170>
 80036e4:	f1c3 0314 	rsb	r3, r3, #20
 80036e8:	fa46 f103 	asr.w	r1, r6, r3
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	42b3      	cmp	r3, r6
 80036f2:	f040 847a 	bne.w	8003fea <__ieee754_pow+0x9c2>
 80036f6:	f001 0101 	and.w	r1, r1, #1
 80036fa:	f1c1 0302 	rsb	r3, r1, #2
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4b58      	ldr	r3, [pc, #352]	; (8003864 <__ieee754_pow+0x23c>)
 8003702:	429e      	cmp	r6, r3
 8003704:	d132      	bne.n	800376c <__ieee754_pow+0x144>
 8003706:	2f00      	cmp	r7, #0
 8003708:	f280 846b 	bge.w	8003fe2 <__ieee754_pow+0x9ba>
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	2000      	movs	r0, #0
 8003712:	4954      	ldr	r1, [pc, #336]	; (8003864 <__ieee754_pow+0x23c>)
 8003714:	f7fd f802 	bl	800071c <__aeabi_ddiv>
 8003718:	e7a3      	b.n	8003662 <__ieee754_pow+0x3a>
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2a00      	cmp	r2, #0
 8003720:	d13c      	bne.n	800379c <__ieee754_pow+0x174>
 8003722:	4b4e      	ldr	r3, [pc, #312]	; (800385c <__ieee754_pow+0x234>)
 8003724:	429e      	cmp	r6, r3
 8003726:	d1eb      	bne.n	8003700 <__ieee754_pow+0xd8>
 8003728:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800372c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003730:	ea53 030a 	orrs.w	r3, r3, sl
 8003734:	f000 8449 	beq.w	8003fca <__ieee754_pow+0x9a2>
 8003738:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <__ieee754_pow+0x240>)
 800373a:	429c      	cmp	r4, r3
 800373c:	dd0b      	ble.n	8003756 <__ieee754_pow+0x12e>
 800373e:	2f00      	cmp	r7, #0
 8003740:	f2c0 8449 	blt.w	8003fd6 <__ieee754_pow+0x9ae>
 8003744:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003748:	4658      	mov	r0, fp
 800374a:	4661      	mov	r1, ip
 800374c:	b013      	add	sp, #76	; 0x4c
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	2302      	movs	r3, #2
 8003754:	e7e2      	b.n	800371c <__ieee754_pow+0xf4>
 8003756:	2f00      	cmp	r7, #0
 8003758:	f04f 0b00 	mov.w	fp, #0
 800375c:	f04f 0c00 	mov.w	ip, #0
 8003760:	daf2      	bge.n	8003748 <__ieee754_pow+0x120>
 8003762:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003766:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800376a:	e7ed      	b.n	8003748 <__ieee754_pow+0x120>
 800376c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003770:	d106      	bne.n	8003780 <__ieee754_pow+0x158>
 8003772:	4642      	mov	r2, r8
 8003774:	464b      	mov	r3, r9
 8003776:	4640      	mov	r0, r8
 8003778:	4649      	mov	r1, r9
 800377a:	f7fc fea5 	bl	80004c8 <__aeabi_dmul>
 800377e:	e770      	b.n	8003662 <__ieee754_pow+0x3a>
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <__ieee754_pow+0x244>)
 8003782:	429f      	cmp	r7, r3
 8003784:	d10a      	bne.n	800379c <__ieee754_pow+0x174>
 8003786:	2d00      	cmp	r5, #0
 8003788:	db08      	blt.n	800379c <__ieee754_pow+0x174>
 800378a:	4640      	mov	r0, r8
 800378c:	4649      	mov	r1, r9
 800378e:	b013      	add	sp, #76	; 0x4c
 8003790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003794:	f000 bd0a 	b.w	80041ac <__ieee754_sqrt>
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4640      	mov	r0, r8
 800379e:	4649      	mov	r1, r9
 80037a0:	f000 fc58 	bl	8004054 <fabs>
 80037a4:	4683      	mov	fp, r0
 80037a6:	468c      	mov	ip, r1
 80037a8:	f1ba 0f00 	cmp.w	sl, #0
 80037ac:	d128      	bne.n	8003800 <__ieee754_pow+0x1d8>
 80037ae:	b124      	cbz	r4, 80037ba <__ieee754_pow+0x192>
 80037b0:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <__ieee754_pow+0x23c>)
 80037b2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d122      	bne.n	8003800 <__ieee754_pow+0x1d8>
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	da07      	bge.n	80037ce <__ieee754_pow+0x1a6>
 80037be:	465a      	mov	r2, fp
 80037c0:	4663      	mov	r3, ip
 80037c2:	2000      	movs	r0, #0
 80037c4:	4927      	ldr	r1, [pc, #156]	; (8003864 <__ieee754_pow+0x23c>)
 80037c6:	f7fc ffa9 	bl	800071c <__aeabi_ddiv>
 80037ca:	4683      	mov	fp, r0
 80037cc:	468c      	mov	ip, r1
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	daba      	bge.n	8003748 <__ieee754_pow+0x120>
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80037d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80037dc:	431c      	orrs	r4, r3
 80037de:	d108      	bne.n	80037f2 <__ieee754_pow+0x1ca>
 80037e0:	465a      	mov	r2, fp
 80037e2:	4663      	mov	r3, ip
 80037e4:	4658      	mov	r0, fp
 80037e6:	4661      	mov	r1, ip
 80037e8:	f7fc fcb6 	bl	8000158 <__aeabi_dsub>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	e790      	b.n	8003714 <__ieee754_pow+0xec>
 80037f2:	9b00      	ldr	r3, [sp, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d1a7      	bne.n	8003748 <__ieee754_pow+0x120>
 80037f8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80037fc:	469c      	mov	ip, r3
 80037fe:	e7a3      	b.n	8003748 <__ieee754_pow+0x120>
 8003800:	0feb      	lsrs	r3, r5, #31
 8003802:	3b01      	subs	r3, #1
 8003804:	930c      	str	r3, [sp, #48]	; 0x30
 8003806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003808:	9b00      	ldr	r3, [sp, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	d104      	bne.n	8003818 <__ieee754_pow+0x1f0>
 800380e:	4642      	mov	r2, r8
 8003810:	464b      	mov	r3, r9
 8003812:	4640      	mov	r0, r8
 8003814:	4649      	mov	r1, r9
 8003816:	e7e7      	b.n	80037e8 <__ieee754_pow+0x1c0>
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <__ieee754_pow+0x248>)
 800381a:	429e      	cmp	r6, r3
 800381c:	f340 80f6 	ble.w	8003a0c <__ieee754_pow+0x3e4>
 8003820:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003824:	429e      	cmp	r6, r3
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <__ieee754_pow+0x240>)
 8003828:	dd09      	ble.n	800383e <__ieee754_pow+0x216>
 800382a:	429c      	cmp	r4, r3
 800382c:	dc0c      	bgt.n	8003848 <__ieee754_pow+0x220>
 800382e:	2f00      	cmp	r7, #0
 8003830:	da0c      	bge.n	800384c <__ieee754_pow+0x224>
 8003832:	2000      	movs	r0, #0
 8003834:	b013      	add	sp, #76	; 0x4c
 8003836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383a:	f000 bcb2 	b.w	80041a2 <__math_oflow>
 800383e:	429c      	cmp	r4, r3
 8003840:	dbf5      	blt.n	800382e <__ieee754_pow+0x206>
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <__ieee754_pow+0x23c>)
 8003844:	429c      	cmp	r4, r3
 8003846:	dd15      	ble.n	8003874 <__ieee754_pow+0x24c>
 8003848:	2f00      	cmp	r7, #0
 800384a:	dcf2      	bgt.n	8003832 <__ieee754_pow+0x20a>
 800384c:	2000      	movs	r0, #0
 800384e:	b013      	add	sp, #76	; 0x4c
 8003850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	f000 bca0 	b.w	8004198 <__math_uflow>
 8003858:	fff00000 	.word	0xfff00000
 800385c:	7ff00000 	.word	0x7ff00000
 8003860:	433fffff 	.word	0x433fffff
 8003864:	3ff00000 	.word	0x3ff00000
 8003868:	3fefffff 	.word	0x3fefffff
 800386c:	3fe00000 	.word	0x3fe00000
 8003870:	41e00000 	.word	0x41e00000
 8003874:	4661      	mov	r1, ip
 8003876:	2200      	movs	r2, #0
 8003878:	4658      	mov	r0, fp
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <__ieee754_pow+0x3d0>)
 800387c:	f7fc fc6c 	bl	8000158 <__aeabi_dsub>
 8003880:	a355      	add	r3, pc, #340	; (adr r3, 80039d8 <__ieee754_pow+0x3b0>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	4604      	mov	r4, r0
 8003888:	460d      	mov	r5, r1
 800388a:	f7fc fe1d 	bl	80004c8 <__aeabi_dmul>
 800388e:	a354      	add	r3, pc, #336	; (adr r3, 80039e0 <__ieee754_pow+0x3b8>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	f7fc fe14 	bl	80004c8 <__aeabi_dmul>
 80038a0:	2200      	movs	r2, #0
 80038a2:	4682      	mov	sl, r0
 80038a4:	468b      	mov	fp, r1
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	4b54      	ldr	r3, [pc, #336]	; (80039fc <__ieee754_pow+0x3d4>)
 80038ac:	f7fc fe0c 	bl	80004c8 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	a14c      	add	r1, pc, #304	; (adr r1, 80039e8 <__ieee754_pow+0x3c0>)
 80038b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038ba:	f7fc fc4d 	bl	8000158 <__aeabi_dsub>
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f7fc fe01 	bl	80004c8 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	2000      	movs	r0, #0
 80038cc:	494c      	ldr	r1, [pc, #304]	; (8003a00 <__ieee754_pow+0x3d8>)
 80038ce:	f7fc fc43 	bl	8000158 <__aeabi_dsub>
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	4680      	mov	r8, r0
 80038d8:	4689      	mov	r9, r1
 80038da:	4620      	mov	r0, r4
 80038dc:	4629      	mov	r1, r5
 80038de:	f7fc fdf3 	bl	80004c8 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4640      	mov	r0, r8
 80038e8:	4649      	mov	r1, r9
 80038ea:	f7fc fded 	bl	80004c8 <__aeabi_dmul>
 80038ee:	a340      	add	r3, pc, #256	; (adr r3, 80039f0 <__ieee754_pow+0x3c8>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f7fc fde8 	bl	80004c8 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4650      	mov	r0, sl
 80038fe:	4659      	mov	r1, fp
 8003900:	f7fc fc2a 	bl	8000158 <__aeabi_dsub>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4604      	mov	r4, r0
 800390a:	460d      	mov	r5, r1
 800390c:	4630      	mov	r0, r6
 800390e:	4639      	mov	r1, r7
 8003910:	f7fc fc24 	bl	800015c <__adddf3>
 8003914:	2000      	movs	r0, #0
 8003916:	4632      	mov	r2, r6
 8003918:	463b      	mov	r3, r7
 800391a:	4682      	mov	sl, r0
 800391c:	468b      	mov	fp, r1
 800391e:	f7fc fc1b 	bl	8000158 <__aeabi_dsub>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fc fc15 	bl	8000158 <__aeabi_dsub>
 800392e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003932:	9b00      	ldr	r3, [sp, #0]
 8003934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003936:	3b01      	subs	r3, #1
 8003938:	4313      	orrs	r3, r2
 800393a:	f04f 0600 	mov.w	r6, #0
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	bf0c      	ite	eq
 8003944:	4b2f      	ldreq	r3, [pc, #188]	; (8003a04 <__ieee754_pow+0x3dc>)
 8003946:	4b2c      	ldrne	r3, [pc, #176]	; (80039f8 <__ieee754_pow+0x3d0>)
 8003948:	4604      	mov	r4, r0
 800394a:	460d      	mov	r5, r1
 800394c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003950:	e9cd 2300 	strd	r2, r3, [sp]
 8003954:	4632      	mov	r2, r6
 8003956:	463b      	mov	r3, r7
 8003958:	f7fc fbfe 	bl	8000158 <__aeabi_dsub>
 800395c:	4652      	mov	r2, sl
 800395e:	465b      	mov	r3, fp
 8003960:	f7fc fdb2 	bl	80004c8 <__aeabi_dmul>
 8003964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003968:	4680      	mov	r8, r0
 800396a:	4689      	mov	r9, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fdaa 	bl	80004c8 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4640      	mov	r0, r8
 800397a:	4649      	mov	r1, r9
 800397c:	f7fc fbee 	bl	800015c <__adddf3>
 8003980:	4632      	mov	r2, r6
 8003982:	463b      	mov	r3, r7
 8003984:	4680      	mov	r8, r0
 8003986:	4689      	mov	r9, r1
 8003988:	4650      	mov	r0, sl
 800398a:	4659      	mov	r1, fp
 800398c:	f7fc fd9c 	bl	80004c8 <__aeabi_dmul>
 8003990:	4604      	mov	r4, r0
 8003992:	460d      	mov	r5, r1
 8003994:	460b      	mov	r3, r1
 8003996:	4602      	mov	r2, r0
 8003998:	4649      	mov	r1, r9
 800399a:	4640      	mov	r0, r8
 800399c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80039a0:	f7fc fbdc 	bl	800015c <__adddf3>
 80039a4:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <__ieee754_pow+0x3e0>)
 80039a6:	4682      	mov	sl, r0
 80039a8:	4299      	cmp	r1, r3
 80039aa:	460f      	mov	r7, r1
 80039ac:	460e      	mov	r6, r1
 80039ae:	f340 82e7 	ble.w	8003f80 <__ieee754_pow+0x958>
 80039b2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80039b6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80039ba:	4303      	orrs	r3, r0
 80039bc:	f000 81e2 	beq.w	8003d84 <__ieee754_pow+0x75c>
 80039c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	f7fc fff0 	bl	80009ac <__aeabi_dcmplt>
 80039cc:	3800      	subs	r0, #0
 80039ce:	bf18      	it	ne
 80039d0:	2001      	movne	r0, #1
 80039d2:	e72f      	b.n	8003834 <__ieee754_pow+0x20c>
 80039d4:	f3af 8000 	nop.w
 80039d8:	60000000 	.word	0x60000000
 80039dc:	3ff71547 	.word	0x3ff71547
 80039e0:	f85ddf44 	.word	0xf85ddf44
 80039e4:	3e54ae0b 	.word	0x3e54ae0b
 80039e8:	55555555 	.word	0x55555555
 80039ec:	3fd55555 	.word	0x3fd55555
 80039f0:	652b82fe 	.word	0x652b82fe
 80039f4:	3ff71547 	.word	0x3ff71547
 80039f8:	3ff00000 	.word	0x3ff00000
 80039fc:	3fd00000 	.word	0x3fd00000
 8003a00:	3fe00000 	.word	0x3fe00000
 8003a04:	bff00000 	.word	0xbff00000
 8003a08:	408fffff 	.word	0x408fffff
 8003a0c:	4bd4      	ldr	r3, [pc, #848]	; (8003d60 <__ieee754_pow+0x738>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	402b      	ands	r3, r5
 8003a12:	b943      	cbnz	r3, 8003a26 <__ieee754_pow+0x3fe>
 8003a14:	4658      	mov	r0, fp
 8003a16:	4661      	mov	r1, ip
 8003a18:	4bd2      	ldr	r3, [pc, #840]	; (8003d64 <__ieee754_pow+0x73c>)
 8003a1a:	f7fc fd55 	bl	80004c8 <__aeabi_dmul>
 8003a1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003a22:	4683      	mov	fp, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	1523      	asrs	r3, r4, #20
 8003a28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003a2c:	4413      	add	r3, r2
 8003a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a30:	4bcd      	ldr	r3, [pc, #820]	; (8003d68 <__ieee754_pow+0x740>)
 8003a32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003a36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003a40:	dd08      	ble.n	8003a54 <__ieee754_pow+0x42c>
 8003a42:	4bca      	ldr	r3, [pc, #808]	; (8003d6c <__ieee754_pow+0x744>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	f340 8164 	ble.w	8003d12 <__ieee754_pow+0x6ea>
 8003a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a4c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003a50:	3301      	adds	r3, #1
 8003a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a54:	2600      	movs	r6, #0
 8003a56:	00f3      	lsls	r3, r6, #3
 8003a58:	930d      	str	r3, [sp, #52]	; 0x34
 8003a5a:	4bc5      	ldr	r3, [pc, #788]	; (8003d70 <__ieee754_pow+0x748>)
 8003a5c:	4658      	mov	r0, fp
 8003a5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003a62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a66:	4629      	mov	r1, r5
 8003a68:	461a      	mov	r2, r3
 8003a6a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003a6e:	4623      	mov	r3, r4
 8003a70:	f7fc fb72 	bl	8000158 <__aeabi_dsub>
 8003a74:	46da      	mov	sl, fp
 8003a76:	462b      	mov	r3, r5
 8003a78:	4652      	mov	r2, sl
 8003a7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003a7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a82:	f7fc fb6b 	bl	800015c <__adddf3>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	49b9      	ldr	r1, [pc, #740]	; (8003d74 <__ieee754_pow+0x74c>)
 8003a8e:	f7fc fe45 	bl	800071c <__aeabi_ddiv>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a9a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a9e:	f7fc fd13 	bl	80004c8 <__aeabi_dmul>
 8003aa2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003aa6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003aaa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	46ab      	mov	fp, r5
 8003ab4:	106d      	asrs	r5, r5, #1
 8003ab6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003aba:	9304      	str	r3, [sp, #16]
 8003abc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003ac0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003ac4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003ac8:	4640      	mov	r0, r8
 8003aca:	4649      	mov	r1, r9
 8003acc:	4614      	mov	r4, r2
 8003ace:	461d      	mov	r5, r3
 8003ad0:	f7fc fcfa 	bl	80004c8 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003adc:	f7fc fb3c 	bl	8000158 <__aeabi_dsub>
 8003ae0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	460f      	mov	r7, r1
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7fc fb34 	bl	8000158 <__aeabi_dsub>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4650      	mov	r0, sl
 8003af6:	4659      	mov	r1, fp
 8003af8:	f7fc fb2e 	bl	8000158 <__aeabi_dsub>
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	f7fc fce2 	bl	80004c8 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4630      	mov	r0, r6
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	f7fc fb24 	bl	8000158 <__aeabi_dsub>
 8003b10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b14:	f7fc fcd8 	bl	80004c8 <__aeabi_dmul>
 8003b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b1c:	4682      	mov	sl, r0
 8003b1e:	468b      	mov	fp, r1
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f7fc fcd0 	bl	80004c8 <__aeabi_dmul>
 8003b28:	a37b      	add	r3, pc, #492	; (adr r3, 8003d18 <__ieee754_pow+0x6f0>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	4604      	mov	r4, r0
 8003b30:	460d      	mov	r5, r1
 8003b32:	f7fc fcc9 	bl	80004c8 <__aeabi_dmul>
 8003b36:	a37a      	add	r3, pc, #488	; (adr r3, 8003d20 <__ieee754_pow+0x6f8>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fb0e 	bl	800015c <__adddf3>
 8003b40:	4622      	mov	r2, r4
 8003b42:	462b      	mov	r3, r5
 8003b44:	f7fc fcc0 	bl	80004c8 <__aeabi_dmul>
 8003b48:	a377      	add	r3, pc, #476	; (adr r3, 8003d28 <__ieee754_pow+0x700>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fb05 	bl	800015c <__adddf3>
 8003b52:	4622      	mov	r2, r4
 8003b54:	462b      	mov	r3, r5
 8003b56:	f7fc fcb7 	bl	80004c8 <__aeabi_dmul>
 8003b5a:	a375      	add	r3, pc, #468	; (adr r3, 8003d30 <__ieee754_pow+0x708>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fafc 	bl	800015c <__adddf3>
 8003b64:	4622      	mov	r2, r4
 8003b66:	462b      	mov	r3, r5
 8003b68:	f7fc fcae 	bl	80004c8 <__aeabi_dmul>
 8003b6c:	a372      	add	r3, pc, #456	; (adr r3, 8003d38 <__ieee754_pow+0x710>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc faf3 	bl	800015c <__adddf3>
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	f7fc fca5 	bl	80004c8 <__aeabi_dmul>
 8003b7e:	a370      	add	r3, pc, #448	; (adr r3, 8003d40 <__ieee754_pow+0x718>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f7fc faea 	bl	800015c <__adddf3>
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	460f      	mov	r7, r1
 8003b8e:	462b      	mov	r3, r5
 8003b90:	4620      	mov	r0, r4
 8003b92:	4629      	mov	r1, r5
 8003b94:	f7fc fc98 	bl	80004c8 <__aeabi_dmul>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	f7fc fc92 	bl	80004c8 <__aeabi_dmul>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	f7fc fad4 	bl	800015c <__adddf3>
 8003bb4:	4652      	mov	r2, sl
 8003bb6:	465b      	mov	r3, fp
 8003bb8:	f7fc fc86 	bl	80004c8 <__aeabi_dmul>
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	f7fc facc 	bl	800015c <__adddf3>
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460f      	mov	r7, r1
 8003bca:	464b      	mov	r3, r9
 8003bcc:	4640      	mov	r0, r8
 8003bce:	4649      	mov	r1, r9
 8003bd0:	f7fc fc7a 	bl	80004c8 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <__ieee754_pow+0x750>)
 8003be0:	f7fc fabc 	bl	800015c <__adddf3>
 8003be4:	4632      	mov	r2, r6
 8003be6:	463b      	mov	r3, r7
 8003be8:	f7fc fab8 	bl	800015c <__adddf3>
 8003bec:	2400      	movs	r4, #0
 8003bee:	460d      	mov	r5, r1
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	f7fc fc66 	bl	80004c8 <__aeabi_dmul>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4680      	mov	r8, r0
 8003c00:	4689      	mov	r9, r1
 8003c02:	4620      	mov	r0, r4
 8003c04:	4629      	mov	r1, r5
 8003c06:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <__ieee754_pow+0x750>)
 8003c08:	f7fc faa6 	bl	8000158 <__aeabi_dsub>
 8003c0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c10:	f7fc faa2 	bl	8000158 <__aeabi_dsub>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4630      	mov	r0, r6
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	f7fc fa9c 	bl	8000158 <__aeabi_dsub>
 8003c20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c24:	f7fc fc50 	bl	80004c8 <__aeabi_dmul>
 8003c28:	4622      	mov	r2, r4
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	460f      	mov	r7, r1
 8003c2e:	462b      	mov	r3, r5
 8003c30:	4650      	mov	r0, sl
 8003c32:	4659      	mov	r1, fp
 8003c34:	f7fc fc48 	bl	80004c8 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	4639      	mov	r1, r7
 8003c40:	f7fc fa8c 	bl	800015c <__adddf3>
 8003c44:	2400      	movs	r4, #0
 8003c46:	4606      	mov	r6, r0
 8003c48:	460f      	mov	r7, r1
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4640      	mov	r0, r8
 8003c50:	4649      	mov	r1, r9
 8003c52:	f7fc fa83 	bl	800015c <__adddf3>
 8003c56:	a33c      	add	r3, pc, #240	; (adr r3, 8003d48 <__ieee754_pow+0x720>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	460d      	mov	r5, r1
 8003c60:	f7fc fc32 	bl	80004c8 <__aeabi_dmul>
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc fa72 	bl	8000158 <__aeabi_dsub>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc fa6c 	bl	8000158 <__aeabi_dsub>
 8003c80:	a333      	add	r3, pc, #204	; (adr r3, 8003d50 <__ieee754_pow+0x728>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fc1f 	bl	80004c8 <__aeabi_dmul>
 8003c8a:	a333      	add	r3, pc, #204	; (adr r3, 8003d58 <__ieee754_pow+0x730>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	4606      	mov	r6, r0
 8003c92:	460f      	mov	r7, r1
 8003c94:	4620      	mov	r0, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7fc fc16 	bl	80004c8 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	f7fc fa5a 	bl	800015c <__adddf3>
 8003ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003caa:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <__ieee754_pow+0x754>)
 8003cac:	4413      	add	r3, r2
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc fa53 	bl	800015c <__adddf3>
 8003cb6:	4680      	mov	r8, r0
 8003cb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003cba:	4689      	mov	r9, r1
 8003cbc:	f7fc fb9a 	bl	80003f4 <__aeabi_i2d>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <__ieee754_pow+0x758>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	f7fc fa41 	bl	800015c <__adddf3>
 8003cda:	4632      	mov	r2, r6
 8003cdc:	463b      	mov	r3, r7
 8003cde:	f7fc fa3d 	bl	800015c <__adddf3>
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	f7fc fa39 	bl	800015c <__adddf3>
 8003cea:	2000      	movs	r0, #0
 8003cec:	4622      	mov	r2, r4
 8003cee:	462b      	mov	r3, r5
 8003cf0:	4682      	mov	sl, r0
 8003cf2:	468b      	mov	fp, r1
 8003cf4:	f7fc fa30 	bl	8000158 <__aeabi_dsub>
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	f7fc fa2c 	bl	8000158 <__aeabi_dsub>
 8003d00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d04:	f7fc fa28 	bl	8000158 <__aeabi_dsub>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	4649      	mov	r1, r9
 8003d10:	e60b      	b.n	800392a <__ieee754_pow+0x302>
 8003d12:	2601      	movs	r6, #1
 8003d14:	e69f      	b.n	8003a56 <__ieee754_pow+0x42e>
 8003d16:	bf00      	nop
 8003d18:	4a454eef 	.word	0x4a454eef
 8003d1c:	3fca7e28 	.word	0x3fca7e28
 8003d20:	93c9db65 	.word	0x93c9db65
 8003d24:	3fcd864a 	.word	0x3fcd864a
 8003d28:	a91d4101 	.word	0xa91d4101
 8003d2c:	3fd17460 	.word	0x3fd17460
 8003d30:	518f264d 	.word	0x518f264d
 8003d34:	3fd55555 	.word	0x3fd55555
 8003d38:	db6fabff 	.word	0xdb6fabff
 8003d3c:	3fdb6db6 	.word	0x3fdb6db6
 8003d40:	33333303 	.word	0x33333303
 8003d44:	3fe33333 	.word	0x3fe33333
 8003d48:	e0000000 	.word	0xe0000000
 8003d4c:	3feec709 	.word	0x3feec709
 8003d50:	dc3a03fd 	.word	0xdc3a03fd
 8003d54:	3feec709 	.word	0x3feec709
 8003d58:	145b01f5 	.word	0x145b01f5
 8003d5c:	be3e2fe0 	.word	0xbe3e2fe0
 8003d60:	7ff00000 	.word	0x7ff00000
 8003d64:	43400000 	.word	0x43400000
 8003d68:	0003988e 	.word	0x0003988e
 8003d6c:	000bb679 	.word	0x000bb679
 8003d70:	080043a8 	.word	0x080043a8
 8003d74:	3ff00000 	.word	0x3ff00000
 8003d78:	40080000 	.word	0x40080000
 8003d7c:	080043c8 	.word	0x080043c8
 8003d80:	080043b8 	.word	0x080043b8
 8003d84:	a39c      	add	r3, pc, #624	; (adr r3, 8003ff8 <__ieee754_pow+0x9d0>)
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc f9e5 	bl	800015c <__adddf3>
 8003d92:	4622      	mov	r2, r4
 8003d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d98:	462b      	mov	r3, r5
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	f7fc f9db 	bl	8000158 <__aeabi_dsub>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003daa:	f7fc fe1d 	bl	80009e8 <__aeabi_dcmpgt>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	f47f ae06 	bne.w	80039c0 <__ieee754_pow+0x398>
 8003db4:	4aa2      	ldr	r2, [pc, #648]	; (8004040 <__ieee754_pow+0xa18>)
 8003db6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f340 8100 	ble.w	8003fc0 <__ieee754_pow+0x998>
 8003dc0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003dc4:	151b      	asrs	r3, r3, #20
 8003dc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003dca:	fa4a fa03 	asr.w	sl, sl, r3
 8003dce:	44b2      	add	sl, r6
 8003dd0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003dd4:	489b      	ldr	r0, [pc, #620]	; (8004044 <__ieee754_pow+0xa1c>)
 8003dd6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003dda:	4108      	asrs	r0, r1
 8003ddc:	ea00 030a 	and.w	r3, r0, sl
 8003de0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8003de4:	f1c1 0114 	rsb	r1, r1, #20
 8003de8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003dec:	fa4a fa01 	asr.w	sl, sl, r1
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	4620      	mov	r0, r4
 8003df8:	4629      	mov	r1, r5
 8003dfa:	bfb8      	it	lt
 8003dfc:	f1ca 0a00 	rsblt	sl, sl, #0
 8003e00:	f7fc f9aa 	bl	8000158 <__aeabi_dsub>
 8003e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e0c:	2400      	movs	r4, #0
 8003e0e:	4642      	mov	r2, r8
 8003e10:	464b      	mov	r3, r9
 8003e12:	f7fc f9a3 	bl	800015c <__adddf3>
 8003e16:	a37a      	add	r3, pc, #488	; (adr r3, 8004000 <__ieee754_pow+0x9d8>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	460d      	mov	r5, r1
 8003e20:	f7fc fb52 	bl	80004c8 <__aeabi_dmul>
 8003e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e28:	4606      	mov	r6, r0
 8003e2a:	460f      	mov	r7, r1
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4629      	mov	r1, r5
 8003e30:	f7fc f992 	bl	8000158 <__aeabi_dsub>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc f98c 	bl	8000158 <__aeabi_dsub>
 8003e40:	a371      	add	r3, pc, #452	; (adr r3, 8004008 <__ieee754_pow+0x9e0>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7fc fb3f 	bl	80004c8 <__aeabi_dmul>
 8003e4a:	a371      	add	r3, pc, #452	; (adr r3, 8004010 <__ieee754_pow+0x9e8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	4680      	mov	r8, r0
 8003e52:	4689      	mov	r9, r1
 8003e54:	4620      	mov	r0, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7fc fb36 	bl	80004c8 <__aeabi_dmul>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4640      	mov	r0, r8
 8003e62:	4649      	mov	r1, r9
 8003e64:	f7fc f97a 	bl	800015c <__adddf3>
 8003e68:	4604      	mov	r4, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4630      	mov	r0, r6
 8003e72:	4639      	mov	r1, r7
 8003e74:	f7fc f972 	bl	800015c <__adddf3>
 8003e78:	4632      	mov	r2, r6
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	4689      	mov	r9, r1
 8003e80:	f7fc f96a 	bl	8000158 <__aeabi_dsub>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc f964 	bl	8000158 <__aeabi_dsub>
 8003e90:	4642      	mov	r2, r8
 8003e92:	4606      	mov	r6, r0
 8003e94:	460f      	mov	r7, r1
 8003e96:	464b      	mov	r3, r9
 8003e98:	4640      	mov	r0, r8
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	f7fc fb14 	bl	80004c8 <__aeabi_dmul>
 8003ea0:	a35d      	add	r3, pc, #372	; (adr r3, 8004018 <__ieee754_pow+0x9f0>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	f7fc fb0d 	bl	80004c8 <__aeabi_dmul>
 8003eae:	a35c      	add	r3, pc, #368	; (adr r3, 8004020 <__ieee754_pow+0x9f8>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc f950 	bl	8000158 <__aeabi_dsub>
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	f7fc fb04 	bl	80004c8 <__aeabi_dmul>
 8003ec0:	a359      	add	r3, pc, #356	; (adr r3, 8004028 <__ieee754_pow+0xa00>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc f949 	bl	800015c <__adddf3>
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f7fc fafb 	bl	80004c8 <__aeabi_dmul>
 8003ed2:	a357      	add	r3, pc, #348	; (adr r3, 8004030 <__ieee754_pow+0xa08>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc f93e 	bl	8000158 <__aeabi_dsub>
 8003edc:	4622      	mov	r2, r4
 8003ede:	462b      	mov	r3, r5
 8003ee0:	f7fc faf2 	bl	80004c8 <__aeabi_dmul>
 8003ee4:	a354      	add	r3, pc, #336	; (adr r3, 8004038 <__ieee754_pow+0xa10>)
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f7fc f937 	bl	800015c <__adddf3>
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	f7fc fae9 	bl	80004c8 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4640      	mov	r0, r8
 8003efc:	4649      	mov	r1, r9
 8003efe:	f7fc f92b 	bl	8000158 <__aeabi_dsub>
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	f7fc fadb 	bl	80004c8 <__aeabi_dmul>
 8003f12:	2200      	movs	r2, #0
 8003f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc f91a 	bl	8000158 <__aeabi_dsub>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f2c:	f7fc fbf6 	bl	800071c <__aeabi_ddiv>
 8003f30:	4632      	mov	r2, r6
 8003f32:	4604      	mov	r4, r0
 8003f34:	460d      	mov	r5, r1
 8003f36:	463b      	mov	r3, r7
 8003f38:	4640      	mov	r0, r8
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	f7fc fac4 	bl	80004c8 <__aeabi_dmul>
 8003f40:	4632      	mov	r2, r6
 8003f42:	463b      	mov	r3, r7
 8003f44:	f7fc f90a 	bl	800015c <__adddf3>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7fc f902 	bl	8000158 <__aeabi_dsub>
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	f7fc f8fe 	bl	8000158 <__aeabi_dsub>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	2000      	movs	r0, #0
 8003f62:	4939      	ldr	r1, [pc, #228]	; (8004048 <__ieee754_pow+0xa20>)
 8003f64:	f7fc f8f8 	bl	8000158 <__aeabi_dsub>
 8003f68:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003f6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003f70:	da29      	bge.n	8003fc6 <__ieee754_pow+0x99e>
 8003f72:	4652      	mov	r2, sl
 8003f74:	f000 f874 	bl	8004060 <scalbn>
 8003f78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f7c:	f7ff bbfd 	b.w	800377a <__ieee754_pow+0x152>
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <__ieee754_pow+0xa24>)
 8003f82:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003f86:	429f      	cmp	r7, r3
 8003f88:	f77f af14 	ble.w	8003db4 <__ieee754_pow+0x78c>
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <__ieee754_pow+0xa28>)
 8003f8e:	440b      	add	r3, r1
 8003f90:	4303      	orrs	r3, r0
 8003f92:	d009      	beq.n	8003fa8 <__ieee754_pow+0x980>
 8003f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f7fc fd06 	bl	80009ac <__aeabi_dcmplt>
 8003fa0:	3800      	subs	r0, #0
 8003fa2:	bf18      	it	ne
 8003fa4:	2001      	movne	r0, #1
 8003fa6:	e452      	b.n	800384e <__ieee754_pow+0x226>
 8003fa8:	4622      	mov	r2, r4
 8003faa:	462b      	mov	r3, r5
 8003fac:	f7fc f8d4 	bl	8000158 <__aeabi_dsub>
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	f7fc fd0e 	bl	80009d4 <__aeabi_dcmpge>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f43f aefb 	beq.w	8003db4 <__ieee754_pow+0x78c>
 8003fbe:	e7e9      	b.n	8003f94 <__ieee754_pow+0x96c>
 8003fc0:	f04f 0a00 	mov.w	sl, #0
 8003fc4:	e720      	b.n	8003e08 <__ieee754_pow+0x7e0>
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	e7d6      	b.n	8003f78 <__ieee754_pow+0x950>
 8003fca:	f04f 0b00 	mov.w	fp, #0
 8003fce:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004048 <__ieee754_pow+0xa20>
 8003fd2:	f7ff bbb9 	b.w	8003748 <__ieee754_pow+0x120>
 8003fd6:	f04f 0b00 	mov.w	fp, #0
 8003fda:	f04f 0c00 	mov.w	ip, #0
 8003fde:	f7ff bbb3 	b.w	8003748 <__ieee754_pow+0x120>
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	f7ff bb3c 	b.w	8003662 <__ieee754_pow+0x3a>
 8003fea:	9200      	str	r2, [sp, #0]
 8003fec:	f7ff bb88 	b.w	8003700 <__ieee754_pow+0xd8>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f7ff bb72 	b.w	80036da <__ieee754_pow+0xb2>
 8003ff6:	bf00      	nop
 8003ff8:	652b82fe 	.word	0x652b82fe
 8003ffc:	3c971547 	.word	0x3c971547
 8004000:	00000000 	.word	0x00000000
 8004004:	3fe62e43 	.word	0x3fe62e43
 8004008:	fefa39ef 	.word	0xfefa39ef
 800400c:	3fe62e42 	.word	0x3fe62e42
 8004010:	0ca86c39 	.word	0x0ca86c39
 8004014:	be205c61 	.word	0xbe205c61
 8004018:	72bea4d0 	.word	0x72bea4d0
 800401c:	3e663769 	.word	0x3e663769
 8004020:	c5d26bf1 	.word	0xc5d26bf1
 8004024:	3ebbbd41 	.word	0x3ebbbd41
 8004028:	af25de2c 	.word	0xaf25de2c
 800402c:	3f11566a 	.word	0x3f11566a
 8004030:	16bebd93 	.word	0x16bebd93
 8004034:	3f66c16c 	.word	0x3f66c16c
 8004038:	5555553e 	.word	0x5555553e
 800403c:	3fc55555 	.word	0x3fc55555
 8004040:	3fe00000 	.word	0x3fe00000
 8004044:	fff00000 	.word	0xfff00000
 8004048:	3ff00000 	.word	0x3ff00000
 800404c:	4090cbff 	.word	0x4090cbff
 8004050:	3f6f3400 	.word	0x3f6f3400

08004054 <fabs>:
 8004054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004058:	4619      	mov	r1, r3
 800405a:	4770      	bx	lr
 800405c:	0000      	movs	r0, r0
	...

08004060 <scalbn>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	4616      	mov	r6, r2
 8004064:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004068:	4604      	mov	r4, r0
 800406a:	460d      	mov	r5, r1
 800406c:	460b      	mov	r3, r1
 800406e:	b992      	cbnz	r2, 8004096 <scalbn+0x36>
 8004070:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004074:	4303      	orrs	r3, r0
 8004076:	d03c      	beq.n	80040f2 <scalbn+0x92>
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <scalbn+0xe0>)
 800407a:	2200      	movs	r2, #0
 800407c:	f7fc fa24 	bl	80004c8 <__aeabi_dmul>
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <scalbn+0xe4>)
 8004082:	4604      	mov	r4, r0
 8004084:	429e      	cmp	r6, r3
 8004086:	460d      	mov	r5, r1
 8004088:	da0f      	bge.n	80040aa <scalbn+0x4a>
 800408a:	a329      	add	r3, pc, #164	; (adr r3, 8004130 <scalbn+0xd0>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fa1a 	bl	80004c8 <__aeabi_dmul>
 8004094:	e006      	b.n	80040a4 <scalbn+0x44>
 8004096:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800409a:	42ba      	cmp	r2, r7
 800409c:	d109      	bne.n	80040b2 <scalbn+0x52>
 800409e:	4602      	mov	r2, r0
 80040a0:	f7fc f85c 	bl	800015c <__adddf3>
 80040a4:	4604      	mov	r4, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	e023      	b.n	80040f2 <scalbn+0x92>
 80040aa:	460b      	mov	r3, r1
 80040ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80040b0:	3a36      	subs	r2, #54	; 0x36
 80040b2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80040b6:	428e      	cmp	r6, r1
 80040b8:	dd0e      	ble.n	80040d8 <scalbn+0x78>
 80040ba:	a31f      	add	r3, pc, #124	; (adr r3, 8004138 <scalbn+0xd8>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80040c4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80040c8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80040cc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80040d0:	481d      	ldr	r0, [pc, #116]	; (8004148 <scalbn+0xe8>)
 80040d2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80040d6:	e7db      	b.n	8004090 <scalbn+0x30>
 80040d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80040dc:	4432      	add	r2, r6
 80040de:	428a      	cmp	r2, r1
 80040e0:	dceb      	bgt.n	80040ba <scalbn+0x5a>
 80040e2:	2a00      	cmp	r2, #0
 80040e4:	dd08      	ble.n	80040f8 <scalbn+0x98>
 80040e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80040ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040ee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80040f2:	4620      	mov	r0, r4
 80040f4:	4629      	mov	r1, r5
 80040f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80040fc:	da0c      	bge.n	8004118 <scalbn+0xb8>
 80040fe:	a30c      	add	r3, pc, #48	; (adr r3, 8004130 <scalbn+0xd0>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004108:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800410c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004110:	480e      	ldr	r0, [pc, #56]	; (800414c <scalbn+0xec>)
 8004112:	f041 011f 	orr.w	r1, r1, #31
 8004116:	e7bb      	b.n	8004090 <scalbn+0x30>
 8004118:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800411c:	3236      	adds	r2, #54	; 0x36
 800411e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004126:	4620      	mov	r0, r4
 8004128:	4629      	mov	r1, r5
 800412a:	2200      	movs	r2, #0
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <scalbn+0xf0>)
 800412e:	e7af      	b.n	8004090 <scalbn+0x30>
 8004130:	c2f8f359 	.word	0xc2f8f359
 8004134:	01a56e1f 	.word	0x01a56e1f
 8004138:	8800759c 	.word	0x8800759c
 800413c:	7e37e43c 	.word	0x7e37e43c
 8004140:	43500000 	.word	0x43500000
 8004144:	ffff3cb0 	.word	0xffff3cb0
 8004148:	8800759c 	.word	0x8800759c
 800414c:	c2f8f359 	.word	0xc2f8f359
 8004150:	3c900000 	.word	0x3c900000

08004154 <with_errno>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	460d      	mov	r5, r1
 800415a:	4616      	mov	r6, r2
 800415c:	f7ff f9cc 	bl	80034f8 <__errno>
 8004160:	4629      	mov	r1, r5
 8004162:	6006      	str	r6, [r0, #0]
 8004164:	4620      	mov	r0, r4
 8004166:	bd70      	pop	{r4, r5, r6, pc}

08004168 <xflow>:
 8004168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800416a:	4615      	mov	r5, r2
 800416c:	461c      	mov	r4, r3
 800416e:	b180      	cbz	r0, 8004192 <xflow+0x2a>
 8004170:	4610      	mov	r0, r2
 8004172:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004176:	e9cd 0100 	strd	r0, r1, [sp]
 800417a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800417e:	4628      	mov	r0, r5
 8004180:	4621      	mov	r1, r4
 8004182:	f7fc f9a1 	bl	80004c8 <__aeabi_dmul>
 8004186:	2222      	movs	r2, #34	; 0x22
 8004188:	b003      	add	sp, #12
 800418a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800418e:	f7ff bfe1 	b.w	8004154 <with_errno>
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	e7ee      	b.n	8004176 <xflow+0xe>

08004198 <__math_uflow>:
 8004198:	2200      	movs	r2, #0
 800419a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800419e:	f7ff bfe3 	b.w	8004168 <xflow>

080041a2 <__math_oflow>:
 80041a2:	2200      	movs	r2, #0
 80041a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80041a8:	f7ff bfde 	b.w	8004168 <xflow>

080041ac <__ieee754_sqrt>:
 80041ac:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004350 <__ieee754_sqrt+0x1a4>
 80041b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	ea3c 0c01 	bics.w	ip, ip, r1
 80041b8:	460b      	mov	r3, r1
 80041ba:	4606      	mov	r6, r0
 80041bc:	460d      	mov	r5, r1
 80041be:	460a      	mov	r2, r1
 80041c0:	4604      	mov	r4, r0
 80041c2:	d10e      	bne.n	80041e2 <__ieee754_sqrt+0x36>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f7fc f97f 	bl	80004c8 <__aeabi_dmul>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4630      	mov	r0, r6
 80041d0:	4629      	mov	r1, r5
 80041d2:	f7fb ffc3 	bl	800015c <__adddf3>
 80041d6:	4606      	mov	r6, r0
 80041d8:	460d      	mov	r5, r1
 80041da:	4630      	mov	r0, r6
 80041dc:	4629      	mov	r1, r5
 80041de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e2:	2900      	cmp	r1, #0
 80041e4:	dc0d      	bgt.n	8004202 <__ieee754_sqrt+0x56>
 80041e6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80041ea:	ea5c 0c00 	orrs.w	ip, ip, r0
 80041ee:	d0f4      	beq.n	80041da <__ieee754_sqrt+0x2e>
 80041f0:	b139      	cbz	r1, 8004202 <__ieee754_sqrt+0x56>
 80041f2:	4602      	mov	r2, r0
 80041f4:	f7fb ffb0 	bl	8000158 <__aeabi_dsub>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	f7fc fa8e 	bl	800071c <__aeabi_ddiv>
 8004200:	e7e9      	b.n	80041d6 <__ieee754_sqrt+0x2a>
 8004202:	1512      	asrs	r2, r2, #20
 8004204:	f000 8089 	beq.w	800431a <__ieee754_sqrt+0x16e>
 8004208:	2500      	movs	r5, #0
 800420a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800420e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	07d2      	lsls	r2, r2, #31
 8004218:	bf5c      	itt	pl
 800421a:	005b      	lslpl	r3, r3, #1
 800421c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004220:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004224:	bf58      	it	pl
 8004226:	0064      	lslpl	r4, r4, #1
 8004228:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800422c:	0062      	lsls	r2, r4, #1
 800422e:	2016      	movs	r0, #22
 8004230:	4629      	mov	r1, r5
 8004232:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004236:	1076      	asrs	r6, r6, #1
 8004238:	190f      	adds	r7, r1, r4
 800423a:	429f      	cmp	r7, r3
 800423c:	bfde      	ittt	le
 800423e:	1bdb      	suble	r3, r3, r7
 8004240:	1939      	addle	r1, r7, r4
 8004242:	192d      	addle	r5, r5, r4
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	3801      	subs	r0, #1
 8004248:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800424c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004250:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004254:	d1f0      	bne.n	8004238 <__ieee754_sqrt+0x8c>
 8004256:	4604      	mov	r4, r0
 8004258:	2720      	movs	r7, #32
 800425a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800425e:	428b      	cmp	r3, r1
 8004260:	eb0c 0e00 	add.w	lr, ip, r0
 8004264:	dc02      	bgt.n	800426c <__ieee754_sqrt+0xc0>
 8004266:	d113      	bne.n	8004290 <__ieee754_sqrt+0xe4>
 8004268:	4596      	cmp	lr, r2
 800426a:	d811      	bhi.n	8004290 <__ieee754_sqrt+0xe4>
 800426c:	f1be 0f00 	cmp.w	lr, #0
 8004270:	eb0e 000c 	add.w	r0, lr, ip
 8004274:	da56      	bge.n	8004324 <__ieee754_sqrt+0x178>
 8004276:	2800      	cmp	r0, #0
 8004278:	db54      	blt.n	8004324 <__ieee754_sqrt+0x178>
 800427a:	f101 0801 	add.w	r8, r1, #1
 800427e:	1a5b      	subs	r3, r3, r1
 8004280:	4641      	mov	r1, r8
 8004282:	4596      	cmp	lr, r2
 8004284:	bf88      	it	hi
 8004286:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800428a:	eba2 020e 	sub.w	r2, r2, lr
 800428e:	4464      	add	r4, ip
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	3f01      	subs	r7, #1
 8004294:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004298:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800429c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80042a0:	d1dd      	bne.n	800425e <__ieee754_sqrt+0xb2>
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d01b      	beq.n	80042de <__ieee754_sqrt+0x132>
 80042a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004354 <__ieee754_sqrt+0x1a8>
 80042aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004358 <__ieee754_sqrt+0x1ac>
 80042ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80042b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80042b6:	f7fb ff4f 	bl	8000158 <__aeabi_dsub>
 80042ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4640      	mov	r0, r8
 80042c4:	4649      	mov	r1, r9
 80042c6:	f7fc fb7b 	bl	80009c0 <__aeabi_dcmple>
 80042ca:	b140      	cbz	r0, 80042de <__ieee754_sqrt+0x132>
 80042cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80042d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80042d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80042d8:	d126      	bne.n	8004328 <__ieee754_sqrt+0x17c>
 80042da:	463c      	mov	r4, r7
 80042dc:	3501      	adds	r5, #1
 80042de:	106b      	asrs	r3, r5, #1
 80042e0:	0864      	lsrs	r4, r4, #1
 80042e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80042e6:	07ea      	lsls	r2, r5, #31
 80042e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80042ec:	bf48      	it	mi
 80042ee:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80042f2:	4620      	mov	r0, r4
 80042f4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80042f8:	e76d      	b.n	80041d6 <__ieee754_sqrt+0x2a>
 80042fa:	0ae3      	lsrs	r3, r4, #11
 80042fc:	3915      	subs	r1, #21
 80042fe:	0564      	lsls	r4, r4, #21
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0fa      	beq.n	80042fa <__ieee754_sqrt+0x14e>
 8004304:	02d8      	lsls	r0, r3, #11
 8004306:	d50a      	bpl.n	800431e <__ieee754_sqrt+0x172>
 8004308:	f1c2 0020 	rsb	r0, r2, #32
 800430c:	fa24 f000 	lsr.w	r0, r4, r0
 8004310:	1e55      	subs	r5, r2, #1
 8004312:	4094      	lsls	r4, r2
 8004314:	4303      	orrs	r3, r0
 8004316:	1b4a      	subs	r2, r1, r5
 8004318:	e776      	b.n	8004208 <__ieee754_sqrt+0x5c>
 800431a:	4611      	mov	r1, r2
 800431c:	e7f0      	b.n	8004300 <__ieee754_sqrt+0x154>
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	3201      	adds	r2, #1
 8004322:	e7ef      	b.n	8004304 <__ieee754_sqrt+0x158>
 8004324:	4688      	mov	r8, r1
 8004326:	e7aa      	b.n	800427e <__ieee754_sqrt+0xd2>
 8004328:	f7fb ff18 	bl	800015c <__adddf3>
 800432c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4640      	mov	r0, r8
 8004336:	4649      	mov	r1, r9
 8004338:	f7fc fb38 	bl	80009ac <__aeabi_dcmplt>
 800433c:	b120      	cbz	r0, 8004348 <__ieee754_sqrt+0x19c>
 800433e:	1ca1      	adds	r1, r4, #2
 8004340:	bf08      	it	eq
 8004342:	3501      	addeq	r5, #1
 8004344:	3402      	adds	r4, #2
 8004346:	e7ca      	b.n	80042de <__ieee754_sqrt+0x132>
 8004348:	3401      	adds	r4, #1
 800434a:	f024 0401 	bic.w	r4, r4, #1
 800434e:	e7c6      	b.n	80042de <__ieee754_sqrt+0x132>
 8004350:	7ff00000 	.word	0x7ff00000
 8004354:	20000060 	.word	0x20000060
 8004358:	20000068 	.word	0x20000068

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
